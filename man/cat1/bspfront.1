


bspfront(1)               User Commands               bspfront(1)



NAME
     bspfront - The Oxford BSP  Toolset  compilation  driver  for
     BSPlib


SYNOPSIS
     bspfront [ _o_p_t_i_o_n_s | _f_i_l_e_n_a_m_e_s ]...
     bspf77 [ _o_p_t_i_o_n_s | _f_i_l_e_n_a_m_e_s ]...
     bspcc [ _o_p_t_i_o_n_s | _f_i_l_e_n_a_m_e_s ]...
     bspc++ [ _o_p_t_i_o_n_s | _f_i_l_e_n_a_m_e_s ]...

DESCRIPTION
     Programs written  for  the  bsplib(3)  parallel  programming
     library  should  be  compiled  with  the  compilation driver
     bspfront. The compilation  driver  guides  each  input  file
     through  some  of  the  possible  phases  of  a compilation:
     extracting code from a literate program (see litToPgm(1) and
     litToTex(1) ), compilation, assembly, and linking.

     For each input file, the phase to start with  is  determined
     by the file's suffix:

     .c     C source; preprocess, compile, assemble
     .f     Fortran 77 source; compile, assemble
     .cc    C++ source; preprocess, compile, assemble
     .c++   C++ source; preprocess, compile, assemble
     .lc    Literate C source; unlit, preprocess, compile, assemble
     .lf    Literate  Fortran 77 source; unlit, compile, assemble
     .lcc   Literate  C++ source; unlit, preprocess, compile, assemble
     .lc++  Literate  C++ source; unlit, preprocess, compile, assemble

     Files with other suffixes are passed to the linker.   Common
     cases include:

     .o      Object file
     .a      Archive file

     Linking is always the last stage unless  you  use  the   - c
     option  to  avoid  it (or unless compilation errors stop the
     whole  process).   For  the  link  stage,   all   .o   files
     corresponding  to  source  files, -l libraries, unrecognized
     filenames (including named .o object files and .a  archives)
     are passed to the linker in command-line order.

     bspcc is just an alias  for  bspfront,  whereas  bspc++  and
     bspf77  have the same operational behaviour as bspfront -f77
     and bspfront -c++ respectively.


OPTIONS
     Options must be separate: `-dr' is quite different from `- d
     - r  '.   Any  option  not  recognised by bspfront is passed



Oxford BSP Toolset  Last change: 1.4 25/9/98                    1






bspfront(1)               User Commands               bspfront(1)



     straight through to the underlying compiler.  Here is a sum-
     mary  of  all the options, grouped by type. Explanations can
     be found in the appropriate sections below:


     Overall Options
          -v -c -o _f_i_l_e -cflags _o_p_t_i_o_n_s -f77flags _o_p_t_i_o_n_s -
          c++flags _o_p_t_i_o_n_s -overridecc _c_o_m_m_a_n_d -overridef77
          _c_o_m_m_a_n_d -overridec++ _c_o_m_m_a_n_d -overrideld _c_o_m_m_a_n_d -keep
          -showlog

     Preprocessor Options
          -E -I_d_i_r -D_m_a_c_r_o[=_d_e_f_n] -U_m_a_c_r_o

     Debugging Options
          -g -debug -f[no]check-syncs

     Profiling Options
          -stat -prof -cgprof -nof77munging -f[no]throttle-procs

     General Optimisation Options
          -O -O2 -O3 -flibrary-level _l_e_v_e_l -fcombine-puts-buffer
          _n_u_m_b_e_r,[_n_u_m_b_e_r,[_n_u_m_b_e_r]] -fcontention-resolve _l_e_v_e_l -
          f[no]combine-puts -fcombine-puts-buffer _n_u_m_b_e_r -
          ffixed-bsmp-buffers _n_u_m_b_e_r -finfinite-bsmp-buffers -
          bspbuffer _n_u_m_b_e_r -bspfifo _n_u_m_b_e_r

     Shared Memory Optimisation Options
          -bspbufferstalls _n_u_m_b_e_r -bspnobuffers _n_u_m_b_e_r


     Network Of Workstations (NOW) Optimisation Options
          -bspnobuffers _n_u_m_b_e_r -bspslotsize _n_u_m_b_e_r -bspnoslots
          _n_u_m_b_e_r -bsproundtrip _n_u_m_b_e_r -bspsendlatency _n_u_m_b_e_r


     Process Migration and Fault Tolerance Options
          -f[no]processmigration -fprocessmigration _n_u_m_b_e_r -
          f[no]checkpointing -fcheckpointing _n_u_m_b_e_r

     Linker Options
          -c++ -f77 -mpi -udpip -tcpip -shmemsysv -shmemwin32 -
          l_l_i_b_r_a_r_y -ldflags _f_l_a_g_s -device _d_e_v_i_c_e

     Directory Options
          -L_d_i_r_e_c_t_o_r_y


OVERALL OPTIONS
     -v    Print (on standard error output) the commands executed
          to  run the stages of compilation.  Also print the ver-
          sion number of the compiler  driver  and  the  standard



Oxford BSP Toolset  Last change: 1.4 25/9/98                    2






bspfront(1)               User Commands               bspfront(1)



          compilation options that are set for your platform.

     -c    Suppress the loading  phase  of  the  compilation  and
          force  an  object  file to be produced even if only one
          program is compiled.

     -o _f_i_l_e
          Place output in _f_i_l_e.  This applies regardless to what-
          ever  sort  of output bspfront is producing, whether it
          be an executable or an object file.

     -cflags _o_p_t_i_o_n_s
          Pass _o_p_t_i_o_n_s straight through to the underlying C  com-
          piler.  This  option  is  useful  when an option in the
          underlying C compiler is required, but it clashes  with
          one  of  bspfront's  options.  For example, -_v turns on
          bspfront's verbose mode. If the underlying C  compilers
          verbose  mode is required (which also uses the flag -_v)
          then use -cflags '-v'.

     -f77flags _o_p_t_i_o_n_s
          Pass _o_p_t_i_o_n_s straight through to the underlying Fortran
          77 compiler

     -c++flags _o_p_t_i_o_n_s
          Pass _o_p_t_i_o_n_s straight through  to  the  underlying  C++
          compiler

     -overridecc _c_o_m_m_a_n_d
          Use _c_o_m_m_a_n_d as an alternative C compiler.

     -overridef77 _c_o_m_m_a_n_d
          Use _c_o_m_m_a_n_d as an alternative Fortran 77 compiler.

     -overridec++ _c_o_m_m_a_n_d
          Use _c_o_m_m_a_n_d as an alternative C++ compiler.

     -overrideld _c_o_m_m_a_n_d
          Use _c_o_m_m_a_n_d as an alternative linker.

     -keep
          Any temporary files created by the  compilation  driver
          in _T_M_P_D_I_R are not removed at the end of compilation

     -showlog
          Display a list of users who have been using the  compi-
          lation  driver.  This option is only valid if  bspfront
          has been installed to log usage.

PREPROCESSOR OPTIONS
     -E    Preprocess only the named C files and send the  result
          to  the  standard  output.   The  output  will  contain



Oxford BSP Toolset  Last change: 1.4 25/9/98                    3






bspfront(1)               User Commands               bspfront(1)



          preprocessing directives for use by the  next  pass  of
          the compilation system.

     -I_d_i_r
          Append  directory  _d_i_r  to  the  list  of   directories
          searched for include files.

     -D_m_a_c_r_o
          Define macro _m_a_c_r_o with the string `1' as  its  defini-
          tion.

     -D_m_a_c_r_o=_d_e_f_n
          Define macro _m_a_c_r_o as _d_e_f_n.

     -U_m_a_c_r_o
          Cause any definition of _m_a_c_r_o to be undefined, as if by
          a  #undef  preprocessing directive. If the same name is
          specified for both -D and - U, _m_a_c_r_o  is  not  defined,
          regardless of the order of the options.

DEBUGGING OPTIONS
     -g    Turn on standard Unix debugging.

     -debug
          Turn on the runtime debugging information  in  the  li-
          brary (this will probably be meaningless to people oth-
          er than implementors).

     -f[no]check-syncs
          Check that each superstep encountered during  execution
          is delimited by a bsp_sync(3) at the same textual posi-
          tion in the users code (default is -fcheck-syncs).

PROFILING OPTIONS
     -stat
          Report statistics on the performance of a BSP  program,
          and  the theoretical costs of the collective communica-
          tions. The file _S_T_A_T._b_s_p will be written to the current
          working directory.

     -prof
          Generate BSP profiling  information  suitable  for  the
          analysis  program bspprof(1). The file _P_R_O_F._b_s_p will be
          written to the current working directory.

     -cgprof
          Generate BSP call graph profiling information  suitable
          for   the   analysis  program  bspcgprof(1).  The  file
          _P_R_O_F._b_s_p will  be written to the current working direc-
          tory.  This  option must be used during compilation and
          linking.




Oxford BSP Toolset  Last change: 1.4 25/9/98                    4






bspfront(1)               User Commands               bspfront(1)



     -nof77munging
          Turn off the inlining of filename and line numbers into
          Fortran  77  code.  The information is used by the pro-
          filer, and helps to give useful error messages when us-
          ing the -flibrary-level 0 or -flibrary-level 1 versions
          of the library.

     -f[no]throttle-procs
          When this flag is on, then the number of processes that
          can  concurrently execute the local computation part of
          a superstep is limited to 1, or the number specified by
          the environment variable BSP_THROTTLE_PROCS.

GENERAL OPTIMISATION OPTIONS
     -O -O2 or -O3
          Turn on the appropriate optimisation  packages  in  the
          underlying C, C++, or Fortran 77 compilers.

     -flibrary-level _l_e_v_e_l
          Request the level of sanity checking to be performed by
          the library. The default level is 0.

          0    performs checks  on  registration,  out  of  bound
               DRMA,  and consistent arguments to collective com-
               munications. The communication primitives at  this
               level  of optimisation may not be optimal, but are
               guaranteed  to  be  resource  friendly  (see     -
               flibrary-level _1 below).

          1    is a resource friendly  version  of  the  library.
               This means that if more processes (including other
               users processes) are running on the  machine  than
               processors,  then  the  performance of the library
               doesn't deteriorate.

          2    is an optimised version of the  library  that  has
               been  tuned in such a way that it assumes no other
               major  processes  are  running  on  the   parallel
               machine. When benchmarking, or collecting results,
               use this optimisation level.

     -f[no]combine-puts
          Where possible, combine multiple puts to the same  pro-
          cessor into a single put.

     -fcombine-puts-buffer _n_u_m_b_e_r[,_m_a_x,_m_i_n]
          Each process has buffers of total  size  2*_n_u_m_b_e_r*(P-1)
          for combining puts; where P is the number of processes.
          If the option _m_a_x is specified, then the total size  of
          the  combine buffers across all processors will be _m_a_x;
          and _m_i_n the threashold buffer size where the  optimisa-
          tion is turned off as _m_a_x/_P is smaller than _m_i_n.



Oxford BSP Toolset  Last change: 1.4 25/9/98                    5






bspfront(1)               User Commands               bspfront(1)



     -fcontention-resolve _l_e_v_e_l
          Apply optimisations to automatically eliminate  message
          contention  within  an  algorithm. There are three dif-
          ferent optimisation levels (default level is 1):

          0    no contention elimination

          1    always apply contention elimination.

          2    only  apply  contention  elimination  to  buffered
               transfers.  i.e., don't use contention elimination
               for high-performance puts (bsp_hpput(3))  so  that
               the put can occur asynchronously with computation

     -ffixed-bsmp-buffers _n_u_m_b_e_r
          Use fixed sized system buffers for the Bulk Synchronous
          Message  passing  operations. On some systems (particu-
          larly the Cray T3D),  having  arbitrary  sized  buffers
          denoted  by the -finfinite-bsmp-buffers option incurs a
          large penalty in  barrier synchronisation latency.

     -finfinite-bsmp-buffers
          Use BSMP buffers which dynamically change  in  size  as
          described in the BSPlib proposal.

     -bspbuffer _n_u_m_b_e_r
          Sets the packet size for outgoing messages.  If  _n_u_m_b_e_r
          ends in a 'K', then the size is in kilobytes; otherwise
          the size is assumed to be bytes (see the  results  from
          the  -prof option for optimal buffer sizes for particu-
          lar codes). On some systems, this value is fixed by the
          implementation.

     -bspfifo _n_u_m_b_e_r
          In this implementation of BSPlib, all puts and gets are
          delayed  until  the  end  of the superstep. This option
          sets the initial size of an internal  FIFO  queue  that
          holds  all delayed communications. If more puts are is-
          sued during a superstep, then the FIFO is  extended  in
          _n_u_m_b_e_r  sized  increments.  On some systems, a seperate
          FIFO is used to hold all the gets, and this can not  be
          extended  during  runtime. This queue will only need to
          be increased if a runtime overflow is raised.

SHARED MEMORY OPTIMISATION OPTIONS
     -bspnobuffers _n_u_m_b_e_r
          Each process has a number of incoming buffers associat-
          ed  with  it. The BSPlib communication occurs in a mes-
          sage passing style through these shared memory buffers.
          The  more  buffers there are, then there is more chance
          that the sending process will be able to send a message
          to  the  destination  prcocess.  However,  if  too many



Oxford BSP Toolset  Last change: 1.4 25/9/98                    6






bspfront(1)               User Commands               bspfront(1)



          buffers are allocated, then the receiving  process  may
          spend  too long servicing buffers which are empty. This
          option sets the number of incoming  buffers  associated
          with each process.

     -bspbufferstalls _n_u_m_b_e_r
          The number of incoming  buffers  specified  by  the   -
          _b_s_p_n_o_b_u_f_f_e_r_s  option  are  serviced  in  a  round-robin
          fashion. After _n_u_m_b_e_r stalls (i.e., nothing  came  in),
          then  data  is  attempted  to  be sent out in a similar
          manner. i.e., _n_u_m_b_e_r attempts are made to send packets.

NETWORK OF WORKSTATIONS (NOW) OPTIMISATION OPTIONS
     -bspslotsize _v_a_r_e_p_s_i_l_o_n
          In BSPlib, the mechanism of pacing the transport  layer
          is  achieved  by  using  a  form  of  statistical time-
          division multiplexing that works as follows. The  frame
          size   (-_b_s_p_b_u_f_f_e_r)   and   the  number  of  processors
          (_b_s_p__n_p_r_o_c_s()) involved in the communication are known.
          As the processors' clocks are not necessarily synchron-
          ised, it is not possible to allow the processors access
          in  accordance  with  some permutation, a technique ap-
          plied successfully in  more  tightly-coupled  architec-
          tures.  Thus the processors choose a slot, _q, uniformly
          at random in the interval [_0..._Q-_1]  (where  _Q  is  the
          number of processors communicating at the end of a par-
          ticular superstep), and schedule their transmission for
          this  slot. The choice of a random slot is important if
          the clocks are not synchronised as it ensures that  the
          processors do not repeatedly choose a bad communication
          schedule.  Each processor waits for time _q * _v_a_r_e_p_s_i_l_o_n
          microseconds after the start of the cycle, where _v_a_r_e_p_-
          _s_i_l_o_n _i_s _a _s_l_o_t time, before passing another packet  to
          the  transport  layer. The length of the slot, _v_a_r_e_p_s_i_-
          _l_o_n, is chosen based on the maximum time that the  slot
          can  occupy the physical medium, and takes into account
          collisions that might occur when good throughput is be-
          ing  achieved.  The  mechanism is designed to allow the
          medium to operate at the steady state that  achieves  a
          high  throughput. Since the burstiness of communication
          has been smoothed by this slotting protocol, the errat-
          ic  behaviour of the low-level protocol is avoided, and
          a high utilisation of the medium is ensured.


     -bspnoslots _n_u_m_b_e_r
          This option specifies the number of time slots required
          for  _b_s_p__n_p_r_o_c_s()  processors to simultaneiously send a
          message to another process. For a  shared  bus  or  re-
          peater then _n_u_m_b_e_r should be equal to _b_s_p__n_p_r_o_c_s(). For
          a switch with full duplex links and a back plane  capa-
          city  that  is the sum of the capacities of each of the



Oxford BSP Toolset  Last change: 1.4 25/9/98                    7






bspfront(1)               User Commands               bspfront(1)



          links, then _n_u_m_b_e_r should be set to one.


     -bsproundtrip _n_u_m_b_e_r
          _n_u_m_b_e_r is the round trip delay time,  in  microseconds,
          of a message that contains no payload.


     -bspsendlatency _n_u_m_b_e_r
          In the steady state where a process emits a  stream  of
          empty  packets  into  the  network,  then _n_u_m_b_e_r is the
          time, in microseconds, at which packets can be emitted.
          As  it  is  usually faster to emit packets than receive
          them, then this time will probably equate to the upload
          rate  of  a  packet,  as  a  steady  state  can only be
          achieved when processes are sending and receiving pack-
          ets  at  the same rate. The parameter should be used to
          throttle a fast sender so that it emits  packets  at  a
          rate at which the receiver can safely upload them.

PROCESS MIGRATION AND FAULT TOLERANCE OPTIONS
     -fcheckpointing _n_u_m_b_e_r
          In the NOW implementation of the library, all processes
          checkpoint  themselves  every _n_u_m_b_e_r seconds. After the
          process has checkpointed itself, it continues to run on
          the  same  processor  (see  -_f_p_r_o_c_e_s_s_m_i_g_r_a_t_i_o_n). If the
          process is interupted, then the program can be restart-
          ed  at  the last checkpoint by passing the -_r_e_s_t_a_r_t op-
          tion to _b_s_p_r_u_n(_1), when the program is re-run.


     -fnocheckpointing
          Turn off checkpointing. This is equivalent to - _f_c_h_e_c_k_-
          _p_o_i_n_t_i_n_g _0 .


     -fprocessmigration _n_u_m_b_e_r
          This option is similar to -_f_c_h_e_c_k_p_o_i_n_t_i_n_g. On entry  to
          a  _b_s_p__s_y_n_c(_3)  if _n_u_m_b_e_r seconds has elapsed since the
          last time process migration occured, then all  the  BSP
          processes determine if process migration is applicable.
          This is done by contacting the load  daemon  _b_s_p_l_o_a_d(_3)
          to  see  if  there are any processors with a load lower
          than any processor that has a bsp job  running  on  it,
          minus  one.  If  a  less  loaded  process is found, all
          processes checkpoint themselves, stop, and then restart
          on the _p least loaded processors.

LINKER OPTIONS
     These options come into play when the compiler links  object
     files  into an executable output file.  They are meaningless
     if the compiler is not doing a link step.



Oxford BSP Toolset  Last change: 1.4 25/9/98                    8






bspfront(1)               User Commands               bspfront(1)



     _o_b_j_e_c_t-_f_i_l_e-_n_a_m_e
          A file name that does not end in a  special  recognized
          suffix is considered to name an object file or library.
          (Object files are distinguished from libraries  by  the
          linker  according to the file contents.)  If GCC does a
          link step, these object files are used as input to  the
          linker.


     -device _d_e_v_i_c_e
          Determine which communication device should be used for
          BSPlib programs. The default device is speficied by the
          command bsparch -device .  The _d_e_v_i_c_e option has to  be
          a  valid  BSPlib  device (see the help bsparch -help ),
          and that device has to be installed.


     -_m_p_i Shorthand for the option -device _M_P_A_S_S__M_P_I.


     -_u_d_p_i_p
          Shorthand for the option -device _M_P_A_S_S__U_D_P_I_P.


     -_t_c_p_i_p
          Shorthand for the option -device _M_P_A_S_S__T_C_P_I_P.


     -_s_h_m_e_m_s_y_s_v
          Shorthand for the option -device _S_H_M_E_M__S_Y_S_V.



     -l_l_i_b_r_a_r_y
          Use the library named _l_i_b_r_a_r_y when linking.

          The linker searches a standard list of directories  for
          the   library,   which   is   actually   a  file  named
          `lib_l_i_b_r_a_r_y.a'.  The linker then uses this file  as  if
          it had been specified precisely by name.

          The directories searched include several standard  sys-
          tem directories plus any that you specify with `-L'.

          Normally the files found this way are  library  files -
          archive  files  whose  members  are  object files.  The
          linker handles an archive file by scanning  through  it
          for  members which define symbols that have so far been
          referenced but not defined.   However,  if  the  linker
          finds  an  ordinary  object file rather than a library,
          the object file is linked in the  usual  fashion.   The
          only difference between using an `-l' option and speci-



Oxford BSP Toolset  Last change: 1.4 25/9/98                    9






bspfront(1)               User Commands               bspfront(1)



          fying a file name is that `-l' surrounds  _l_i_b_r_a_r_y  with
          `lib' and `.a' and searches several directories.

     -c++  The C compiler is  the  default  linker.  This  option
          changes the linker to the C++ compiler.

     -f77  Use the Fortran 77 compiler as the linker.   - ldflags
          _f_l_a_g_s Pass _f_l_a_g_s straight through to the linker.

DIRECTORY OPTIONS
     These options  specify  directories  to  search  for  header
     files, for libraries and for parts of the compiler:

     -I_d_i_r
          Append  directory  _d_i_r  to  the  list  of   directories
          searched for include files.

FILES
     file.c                         C source file
     file.h                         C header (preprocessor) file
     file.f                         Fortran 77 file
     file.cc                        C++ source file
     file.lc++                      Literate C++ source file
     file.lc                        Literate C source file
     file.lh                        Literate C header (preprocessor) file
     file.lf                        Literate Fortran 77 file
     file.lcc                       Literate C++ source file
     file.lc++                      Literate C++ source file
     file.s                         assembly language file
     file.o                         object file
     a.out                          link edited output
     _T_M_P_D_I_R/bspfront*               temporary files
     _T_M_P_D_I_R/bspfront_*_preload.c    start-up routine
     _P_R_E_F_I_X/lib/_m_a_c_h/libbspcore*.a  BSPlib subroutine library
     _P_R_E_F_I_X/include                 BSPlib include files

     _P_R_E_F_I_X is  the  installation  prefix  set  when  configuring
     BSPlib.
     _T_M_P_D_I_R comes from the environment variable  TMPDIR  (default
     /usr/tmp if available, else /tmp).


SEE ALSO
     bsplib(3), bspprof(1), bsparch(1)

     ``_B_S_P_l_i_b: _T_h_e _B_S_P _P_r_o_g_r_a_m_m_i_n_g _L_i_b_r_a_r_y'' Jonathan M. D. Hill,
     Bill  McColl,  Dan  C.  Stefanescu,  Mark W. Goudreau, Kevin
     Lang, Satish B. Rao, , Torsten Suel, Thanasis Tsantilas, and
     Rob  Bisseling.  Parallel  Computing,  to  appear  1998. See
     _h_t_t_p://_w_w_w._b_s_p-_w_o_r_l_d_w_i_d_e._o_r_g for more details.





Oxford BSP Toolset  Last change: 1.4 25/9/98                   10






bspfront(1)               User Commands               bspfront(1)



     The Oxford BSP toolset web pages can be found  at:
     _h_t_t_p://_w_w_w._b_s_p-_w_o_r_l_d_w_i_d_e._o_r_g/_i_m_p_l_m_n_t_s/_o_x_t_o_o_l/


BUGS
     Problems  and  bug  reports  should  be  mailed  to  _b_s_p_l_i_b-
     _b_u_g_s@_c_o_m_l_a_b._o_x._a_c._u_k


COPYING
     Copyright 1995,1996,1997,1998 University of Oxford

     Permission  to  use,  copy,  modify,  and  distribute   this
     software,  and  to incorporate it, in whole or in part, into
     other software, is  hereby  granted  without  fee,  provided
     that:

     i    the above copyright notice and this  permission  notice
          appear  in all copies of the source code, and the above
          copyright notice appear in clearly visible form on  all
          supporting documentation   and distribution media;

     ii    modified versions of this software be accompanied by a
          complete  change  history  describing author, date, and
          modifications made;


     iii   and any redistribution of the software, in original or
          modified form, be without fee and subject to these same
          conditions.

AUTHORS
     Jonathan.Hill@comlab.ox.ac.uk

     http://www.comlab.ox.ac.uk/oucl/people/jonathan.hill.html




















Oxford BSP Toolset  Last change: 1.4 25/9/98                   11




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995,1996,1997,1998 University of Oxford           %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: bsp_misc_mpass.lc,v 1.1 1995/08/31 16:33:17 jonh Exp jonh $
% $Log: bsp_misc_mpass.lc,v $
% Revision 1.1  1995/08/31  16:33:17  jonh
% Initial revision
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Misc. routines for DRMA architectures}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Includes and defines}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
#include "bsp_lib.h"
#include <stdarg.h>
#ifdef CRAYPVP
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#endif

extern int _bsp_fork_nprocs;
int *_bsp_barrier_proc_left, *_bsp_barrier_proc_right;
\end{code}

\begin{code}
char *pprSignal(int signal_no) {
  switch(signal_no) {
  case 1:  return "Hangup";
  case 2:  return "Interrupt";
  case 3:  return "Quit";
  case 10: return "Bus Error";
  case 11: return "Segmentation fault";
  default: return "other signal";
  }
}

void kill_process(int signal_no) {
  drma_exit(0);
}

void kill_all_processors(int signal_no) {
#ifdef CRAYPVP
  int i;
  extern pid_t *_bsp_children;

  if (signal_no > 0) {
    printf("\nProcess %d caught SIGNAL %d \"%s\"\n",_bsp_pid,signal_no,
           pprSignal(signal_no));
  }
  if (_bsp_children) {
    for(i=0;i<_bsp_nprocs;i++) 
      if (i!=_bsp_pid) 
        kill(_bsp_children[i],SIGHUP);
  }
  drma_exit(0);
#else
  drma_stopall();
#endif
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Error function: \texttt{bsp\_error}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
An error routine to be called when the program is running in
parallel mode.


\begin{code}
void bsp_abort(char* format, ...) {
  va_list args;

  drma_set_lock(_drma.mutex);
  va_start(args, format);
  fprintf(stderr, "\nABORT(pid%3d)",_bsp_pid);
  vfprintf(stderr, format, args);
  fprintf(stderr, "\n");
  va_end(args);
  fflush(stderr);
  kill_all_processors(-1);    
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Debugging functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void bsp_debug_start(char *text) {
  printf("\nSTART DEBUG(pid%3d) :\"%s\"\n",_bsp_pid,text);
}

void bsp_debug_end(char *text) {
  printf("END DEBUG(pid%3d)   :\"%s\"\n\n",_bsp_pid,text);
}

void bsp_debug_block(char* format, ...) {
va_list args;

   va_start(args, format);
   printf(" DEBUG(pid%3d): ",_bsp_pid);
   vprintf(format, args);
   printf("\n");
   va_end(args);
}

void bsp_debug(char* format, ...) {
  va_list args;
  va_start(args, format);
  printf("DEBUG(pid%3d): ",_bsp_pid);
  vprintf(format, args);
  printf("\n");
  va_end(args);
  fflush(stdout);
}

\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Broadcast}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void drma_broadcast_nprocs() {
  static int bcast_buffer;

  bcast_buffer = _bsp_nprocs;
  barrier_sync();
  if (_bsp_pid!=0)
    drma_get(0,&bcast_buffer,&bcast_buffer,SIZEOF(int));
  barrier_sync();
  _bsp_nprocs = bcast_buffer;
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Determine if an integer is constant throughout all processors}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This routine is used in lots of sanity checking functions. It
determines if the integer argument \texttt{x} is the same on all the
processors. 
\begin{code}
int _bsp_constant(int x) {
  static int temp[BSP_MAX_PROCS];
  int i, result=1;
  
  if (_bsp_nprocs<=1) return 1;
  else {
    barrier_sync();
    for(i=1;i<_bsp_nprocs;i++) 
      drma_put((_bsp_pid+i)%_bsp_nprocs,&x,&temp[_bsp_pid],SIZEOF(int));
    barrier_sync();
    temp[_bsp_pid]=x;
    for(i=0;i<_bsp_nprocs;i++) result = result && (temp[i]==x);
    return result; 
  }
}
\end{code}


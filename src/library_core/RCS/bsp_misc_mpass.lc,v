head	1.1;
access;
symbols;
locks
	jonh:1.1; strict;
comment	@% @;


1.1
date	95.08.31.16.33.17;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995, University of Oxford                         %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id$
% $Log$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Miscellaneous library functions used in the IRIX IPC BSP library}
\label{sect:bspirixmisc}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Includes and defines}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
#include "bsp_lib.h"
#include <stdarg.h>

extern int _bsp_fork_nprocs;
\end{code}

\begin{code}
void kill_all_processors() {
  messg_stopall();
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Error function: \texttt{bsp\_error}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
An error routine to be called when the program is running in
parallel mode.


\begin{code}
void bsp_error(char* format, ...) {
va_list args;

  va_start(args, format);
#ifdef MPASS_MPL 
  fprintf(stderr, "\nERROR(pid%3d)[mperrno %d]",_bsp_pid,mperrno);
#else
  fprintf(stderr, "\nERROR(pid%3d)",_bsp_pid);
#endif
  vfprintf(stderr, format, args);
  fprintf(stderr, "\n");
  va_end(args);
  fflush(stderr);
  kill_all_processors();    
}

void bottom(char* format, ...) {
va_list args;

  va_start(args, format);
  bsp_error(format,args);
  va_end(args);
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Debugging functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void bsp_debug_start(char *text) {
  printf("\nSTART DEBUG(pid%3d) :\"%s\"\n",_bsp_pid,text);
}

void bsp_debug_end(char *text) {
  printf("END DEBUG(pid%3d)   :\"%s\"\n\n",_bsp_pid,text);
}

void bsp_debug_block(char* format, ...) {
va_list args;

   va_start(args, format);
   printf(" DEBUG(pid%3d): ",_bsp_pid);
   vprintf(format, args);
   printf("\n");
   va_end(args);
}

void bsp_debug(char* format, ...) {
  va_list args;
  va_start(args, format);
  printf("DEBUG(pid%3d): ",_bsp_pid);
  vprintf(format, args);
  printf("\n");
  va_end(args);
  fflush(stdout);
}

\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Order preserving printing functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void bsp_print_start(char *text) {
  printf("\nSTART PRINT(pid%3d) :\"%s\"\n",_bsp_pid,text);
}

void bsp_print_end(char *text) {
  printf("END PRINT(pid%3d)   :\"%s\"\n\n",_bsp_pid,text);
}

void bsp_print_block(char* format, ...) {
va_list args;

   va_start(args, format);
   vprintf(format, args);
   va_end(args);
}

void bsp_print(char* format, ...) {
  va_list args;
  va_start(args, format);
  vprintf(format, args);
  va_end(args);
}

\end{code}



@

head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.02.09.08.50.02;	author jonh;	state Exp;
branches;
next	1.1;

1.1
date	95.09.06.14.21.55;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Movinf into level1
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995, University of Oxford                         %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: bsp_collcom_shmem.lc,v 1.1 1995/09/06 14:21:55 jonh Exp jonh $
% $Log: bsp_collcom_shmem.lc,v $
# Revision 1.1  1995/09/06  14:21:55  jonh
# Initial revision
#

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\chapter{High level BSP collective communication operations} 
\label{sect:bspirix}

Operations such as \texttt{reduce}, \texttt{broadcast} and
\texttt{scan} would normally be defined in terms of the BSP library.
The routines given here are built directly ontop of the IRIX IPC
library, which use the data-structures available from the IRIX
implementation of the library.

\begin{code}
#include "bsp_lib.h"
#include "bsp_profile.h"
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Broadcast function}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void bsp_broadcast(int pid, void *src, void *dst, int nbytes) {
  int   togo_nbytes  = nbytes;
  int   chunk_nbytes;
  void *chunk_dst    = dst;
  void *chunk_src    = src;

#ifdef STATISTICS
  if (_bsp_pid==pid) _bspstat.broadcast_nbytes+=nbytes;
#endif
#ifdef SANITY_CHECK
  if (!bsp_constantI(pid))
    bsp_error("{bsp_broadcast} the broadcasting pid is not constant "
              "on all the processors");

  if (!bsp_constantI(nbytes))
    bsp_error("{bsp_broadcast} the broadcasting nbytes is not constant "
              "on all the processors");
#endif
#ifdef PROFILE
  bspprof_sstep_start(0,__LINE__,"bsp_broadcast");
  barrier_sync();
  bspprof_sstep_wait();
#endif
  while (togo_nbytes>0) {
    if (togo_nbytes > BSP_BUFFER_SIZE) {
      togo_nbytes -= BSP_BUFFER_SIZE;
      chunk_nbytes = BSP_BUFFER_SIZE;
    } else {
      chunk_nbytes = togo_nbytes;
      togo_nbytes  = 0;
    }
    if (pid == _bsp_pid) {
#ifdef DEBUG
      bsp_debug("{broadcast}:Copying %d bytes to shared memory buffer",
                 chunk_nbytes);
#endif
      memcpy((char *)_shmem.buffer,(char*)chunk_src,chunk_nbytes);
    } 
    barrier_sync();
    if (!(pid==_bsp_pid && src==dst)) {
#ifdef DEBUG
      bsp_debug("{broadcast}: Copying shared memory buffer to 0x%x",
                chunk_dst);
#endif
      memcpy((char *)chunk_dst,(char *)_shmem.buffer, chunk_nbytes);
    }
    barrier_sync();
    chunk_src = (char*) chunk_src + chunk_nbytes;
    chunk_dst = (char*) chunk_dst + chunk_nbytes;
  }
#ifdef PROFILE
  bspprof_sstep_comm();
  bspprof_sstep_end();
  if (_bsp_pid==pid) 
    bspprof_sstep_inout_colcomm(0,__LINE__,"bsp_broadcast",
                                0,0,1,nbytes);
  else
    bspprof_sstep_inout_colcomm(0,__LINE__-3,"bsp_broadcast",
                                1,nbytes,0,0);
#endif
}
\end{code}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Gather  function}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Inverse of broadcast. \texttt{src} on each processor is put into
\texttt{offset} bytes from \texttt{dst} on \texttt{pid}.
\texttt{offset} is calculated with respect to the sending machine.


\begin{code}
void bsp_gather(int pid, void *src, void *dst, int nbytes) {
  int   togo_nbytes  = nbytes;
  int   i,chunk_nbytes;
  void *chunk_dst    = dst;
  void *chunk_src    = src;

#ifdef STATISTICS
  if (_bsp_pid==pid) _bspstat.gather_nbytes+=nbytes*_bsp_nprocs;
#endif
#ifdef SANITY_CHECK
  if (!bsp_constantI(pid))
    bsp_error("{bsp_gather} the gathering pid is not constant "
              "on all the processors");

  if (!bsp_constantI(nbytes))
    bsp_error("{bsp_gather} the gathering nbytes is not constant "
              "on all the processors");
#endif
#ifdef PROFILE
  bspprof_sstep_start(0,__LINE__,"bsp_gather");
#endif
  while (togo_nbytes>0) {
    if (togo_nbytes > BSP_BUFFER_SIZE) {
      togo_nbytes -= BSP_BUFFER_SIZE;
      chunk_nbytes = BSP_BUFFER_SIZE;
    } else {
      chunk_nbytes = togo_nbytes;
      togo_nbytes  = 0;
    }
    
#ifdef DEBUG
    bsp_debug("{bsp_gather}:Copying %d bytes from 0x%x to shared buffer",
              nbytes,src);
#endif
    memcpy((char *)_shmem.proc_bufferA[_bsp_pid],
           (char*)chunk_src,chunk_nbytes); 
    barrier_sync();
#ifdef PROFILE
    bspprof_sstep_wait();
#endif
    if (_bsp_pid==pid) {
      for(i=0;i<_bsp_nprocs;i++) {
#ifdef DEBUG
        bsp_debug("{bsp_gather}: copying shared memory buffer + %d to 0x%d",
                  _bsp_pid*nbytes,(char*) chunk_dst);
#endif
        memcpy((char *)chunk_dst+(i*nbytes),
              (char *)_shmem.proc_bufferA[i], chunk_nbytes);
      }
    }
    chunk_src = ((char *)chunk_src) + chunk_nbytes;
    chunk_dst = ((char *)chunk_dst) + chunk_nbytes;
#ifdef PROFILE
    bspprof_sstep_comm();
#endif
    barrier_sync();
  }
#ifdef PROFILE
  bspprof_sstep_end();
  if (_bsp_pid==pid) 
    bspprof_sstep_inout_colcomm(0,__LINE__,"bsp_gather",
                                _bsp_nprocs,nbytes*_bsp_nprocs,
                                0,0);
  else
    bspprof_sstep_inout_colcomm(0,__LINE__-4,"bsp_gather",
                                0,0,
                                1,nbytes);
#endif
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Gather  function without profiling}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
A gather is used within the profilign routines. Unfortunately, it is
possible to get into an infinite recursion if the profile buffer is a
little too small. Heres a version of gather that doesnt do any
checking or profiling.


\begin{code}
void bsp_gather_noprof(int pid, void *src, void *dst, int nbytes) {
  int   togo_nbytes  = nbytes;
  int   i,chunk_nbytes;
  void *chunk_dst    = dst;
  void *chunk_src    = src;


  while (togo_nbytes>0) {
    if (togo_nbytes > BSP_BUFFER_SIZE) {
      togo_nbytes -= BSP_BUFFER_SIZE;
      chunk_nbytes = BSP_BUFFER_SIZE;
    } else {
      chunk_nbytes = togo_nbytes;
      togo_nbytes  = 0;
    }
    memcpy((char *)_shmem.proc_bufferA[_bsp_pid],
           (char*)chunk_src,chunk_nbytes); 
    barrier_sync();
    if (_bsp_pid==pid) {
      for(i=0;i<_bsp_nprocs;i++) {
        memcpy((char *)chunk_dst+(i*nbytes),
              (char *)_shmem.proc_bufferA[i], chunk_nbytes);
      }
    }
    chunk_src = ((char *)chunk_src) + chunk_nbytes;
    chunk_dst = ((char *)chunk_dst) + chunk_nbytes;
    barrier_sync();
  }
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Scatter}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void bsp_scatter(int pid, void* src, void* dst, int nbytes) {

#ifdef SANITY_CHECK
  if (!bsp_constantI(pid))
    bsp_error("{bsp_scatter} the scattering pid is not constant "
              "on all the processors");

  if (!bsp_constantI(nbytes))
    bsp_error("{bsp_scatter} the scattering nbytes is not constant "
              "on all the processors");
#endif
  if (_bsp_nprocs*nbytes > BSP_BUFFER_SIZE) {
    bsp_sstep(0);
      bsp_addr(42,src);
      bsp_addr_fetch(pid,42,nbytes*_bsp_pid,dst,nbytes);
    bsp_sstep_end(0);
  } else {
    bsp_broadcast(pid, src, _bsp_scratch_buffer,nbytes*_bsp_nprocs);
    memcpy(dst,_bsp_scratch_buffer + (_bsp_pid*nbytes),nbytes);
  }
}
\end{code}
@


1.1
log
@Initial revision
@
text
@d17 5
a21 2
% $Id$
% $Log$
d48 2
a49 2
#ifdef PROFILE
  if (_bsp_pid==pid) _bspprof.broadcast_nbytes+=nbytes;
d52 1
a52 1
  if (bsp_sumI(pid) != pid * _bsp_nprocs)
d56 1
a56 1
  if (bsp_sumI(nbytes) != nbytes * _bsp_nprocs)
d60 5
d78 1
a78 1
      memcpy((char *)_shmem->buffer,(char*)chunk_src,chunk_nbytes);
d86 1
a86 1
      memcpy((char *)chunk_dst,(char *)_shmem->buffer, chunk_nbytes);
d92 10
a109 1
Its semantics are as if it where implemented as:
a110 7
\begin{verbatim}
void bsp_gather(int pid, void *src, void *dst, int offset, int nbytes) {
  bsp_sstep(100);
  bsp_store(pid,src,dst,offset,nbytes);
  bsp_sstep_end(100);
}
\end{verbatim}
d119 2
a120 2
#ifdef PROFILE
  if (_bsp_pid==pid) _bspprof.gather_nbytes+=nbytes;
d123 2
a124 2
  if (bsp_sumI(pid) != pid * _bsp_nprocs)
    bsp_error("{bsp_gather} the broadcasting pid is not constant "
d127 1
a127 1
  if (bsp_sumI(nbytes) != nbytes * _bsp_nprocs)
d131 3
d147 1
a147 1
    memcpy((char *)_shmem->proc_buffer[_bsp_pid],
d150 3
d160 1
a160 1
              (char *)_shmem->proc_buffer[i], chunk_nbytes);
d165 56
a221 1
  barrier_sync();
d225 26
@

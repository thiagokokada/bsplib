head	1.2;
access;
symbols;
locks; strict;
comment	@% @;


1.2
date	96.02.09.08.56.36;	author jonh;	state Exp;
branches;
next	1.1;

1.1
date	95.08.31.16.35.33;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@moved to level1
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995, University of Oxford                         %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: bsp_scan.lc,v 1.1 1995/08/31 16:35:33 jonh Exp jonh $
% $Log: bsp_scan.lc,v $
% Revision 1.1  1995/08/31  16:35:33  jonh
% Initial revision
%

\begin{code}
#include "bsp_lib.h"
#include "bsp_profile.h"
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Instances of scan and reduce}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{code}
void _bsp_op_addI(int    *res,int    *x,int    *y,int *nbytes) {*res = *x+*y;}
void _bsp_op_andI(int    *res,int    *x,int    *y,int *nbytes) {*res = *x&&*y;}
void _bsp_op_orI(int     *res,int    *x,int    *y,int *nbytes) {*res = *x||*y;}
void _bsp_op_addR(float  *res,float  *x,float  *y,int *nbytes) {*res = *x+*y;}
void _bsp_op_addD(double *res,double *x,double *y,int *nbytes) {*res = *x+*y;}

void _bsp_op_multI(int    *res,int    *x,int    *y,int *nbytes){*res=*x * *y;}
void _bsp_op_multR(float  *res,float  *x,float  *y,int *nbytes){*res=*x * *y;}
void _bsp_op_multD(double *res,double *x,double *y,int *nbytes){*res=*x * *y;}

void _bsp_op_maxI(int    *res, int    *x, int    *y, int *nbytes) {
  *res = (*x>*y)?*x:*y;
}


void _bsp_op_maxR(float  *res, float  *x, float  *y, int *nbytes) {
  *res = (*x>*y)?*x:*y;
}

void _bsp_op_maxD(double *res, double *x, double *y, int *nbytes) {
  *res = (*x>*y)?*x:*y;
}

void _bsp_op_minI(int    *res, int    *x, int    *y, int *nbytes) {
  *res = (*x<*y)?*x:*y;
}

void _bsp_op_minR(float  *res, float  *x, float  *y, int *nbytes) {
  *res = (*x<*y)?*x:*y;
}

void _bsp_op_minD(double *res, double *x, double *y, int *nbytes) {
  *res = (*x<*y)?*x:*y;
}
\end{code}

%%%%%%%%%%%%%
\subsection{constant integer on all processors}
%%%%%%%%%%%%%
The following function is used throughout the implementation of the
library for sanity checking.
\begin{code}
int bsp_constantI(int x) {
  return(bsp_sumI(x) == x*_bsp_nprocs);
}
\end{code}

%%%%%%%%%%%%%
\subsection{All and Any}
%%%%%%%%%%%%%
\begin{code}
#ifndef BSP_SHMEM
/* Specialised cases for shared memory machines */
int bsp_any(int x) {
  int res;
  bsp_reduce(_bsp_op_orI,&x,&res,sizeof(int));
  return res;
}

int bsp_all(int x) {
  int res;
  bsp_reduce(_bsp_op_andI,&x,&res,sizeof(int));
  return res;
}
#endif

int bsp_any_prefix(int x) {
  int res;
  bsp_scan(_bsp_op_orI,&x,&res,sizeof(int));
  return res;
}

int bsp_all_prefix(int x) {
  int res;
  bsp_scan(_bsp_op_andI,&x,&res,sizeof(int));
  return res;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Sum}
%%%%%%%%%%%%%
\begin{code}
#ifndef BSP_SHMEM
/* See Specialised case for shared memory machines */
int bsp_sumI(int x) {
  int res;
  bsp_reduce(_bsp_op_addI,&x,&res,sizeof(int));
  return res;
}

float bsp_sumR(float x) {
  float res;
  bsp_reduce(_bsp_op_addR,&x,&res,sizeof(float));
  return res;
}

double bsp_sumD(double x) {
  double res;
  bsp_reduce(_bsp_op_addD,&x,&res,sizeof(double));
  return res;
}
#endif

int bsp_sumI_prefix(int x) {
  int res;
  bsp_scan(_bsp_op_addI,&x,&res,sizeof(int));
  return res;
}

float bsp_sumR_prefix(float x) {
  float res;
  bsp_scan(_bsp_op_addR,&x,&res,sizeof(float));
  return res;
}

double bsp_sumD_prefix(double x) {
  double res;
  bsp_scan(_bsp_op_addD,&x,&res,sizeof(double));
  return res;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Product}
%%%%%%%%%%%%%
\begin{code}
int bsp_productI(int x) {
  int res;
  bsp_reduce(_bsp_op_multI,&x,&res,sizeof(int));
  return res;
}

float bsp_productR(float x) {
  float res;
  bsp_reduce(_bsp_op_multR,&x,&res,sizeof(float));
  return res;
}

double bsp_productD(double x) {
  double res;
  bsp_reduce(_bsp_op_multD,&x,&res,sizeof(double));
  return res;
}

int bsp_productI_prefix(int x) {
  int res;
  bsp_scan(_bsp_op_multI,&x,&res,sizeof(int));
  return res;
}

float bsp_productR_prefix(float x) {
  float res;
  bsp_scan(_bsp_op_multR,&x,&res,sizeof(float));
  return res;
}

double bsp_productD_prefix(double x) {
  double res;
  bsp_scan(_bsp_op_multD,&x,&res,sizeof(double));
  return res;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Maximum}
%%%%%%%%%%%%%
\begin{code}
int bsp_maxI(int x) {
  int res;
  bsp_reduce(_bsp_op_maxI,&x,&res,sizeof(int));
  return res;
}

float bsp_maxR(float x) {
  float res;
  bsp_reduce(_bsp_op_maxR,&x,&res,sizeof(float));
  return res;
}

double bsp_maxD(double x) {
  double res;
  bsp_reduce(_bsp_op_maxD,&x,&res,sizeof(double));
  return res;
}

int bsp_maxI_prefix(int x) {
  int res;
  bsp_scan(_bsp_op_maxI,&x,&res,sizeof(int));
  return res;
}

float bsp_maxR_prefix(float x) {
  float res;
  bsp_scan(_bsp_op_maxR,&x,&res,sizeof(float));
  return res;
}

double bsp_maxD_prefix(double x) {
  double res;
  bsp_scan(_bsp_op_maxD,&x,&res,sizeof(double));
  return res;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Mimimum}
%%%%%%%%%%%%%
\begin{code}
int bsp_minI(int x) {
  int res;
  bsp_reduce(_bsp_op_minI,&x,&res,sizeof(int));
  return res;
}

float bsp_minR(float x) {
  float res;
  bsp_reduce(_bsp_op_minR,&x,&res,sizeof(float));
  return res;
}

double bsp_minD(double x) {
  double res;
  bsp_reduce(_bsp_op_minD,&x,&res,sizeof(double));
  return res;
}

int bsp_minI_prefix(int x) {
  int res;
  bsp_scan(_bsp_op_minI,&x,&res,sizeof(int));
  return res;
}

float bsp_minR_prefix(float x) {
  float res;
  bsp_scan(_bsp_op_minR,&x,&res,sizeof(float));
  return res;
}

double bsp_minD_prefix(double x) {
  double res;
  bsp_scan(_bsp_op_minD,&x,&res,sizeof(double));
  return res;
}
\end{code}
@


1.1
log
@Initial revision
@
text
@d17 5
a21 2
% $Id$
% $Log$
d33 9
a41 9
_bsp_op_addI(int    *res, int    *x, int    *y, int nbytes) {*res = *x+*y;}
_bsp_op_andI(int    *res, int    *x, int    *y, int nbytes) {*res = *x&&*y;}
_bsp_op_orI(int     *res, int    *x, int    *y, int nbytes) {*res = *x||*y;}
_bsp_op_addR(float  *res, float  *x, float  *y, int nbytes) {*res = *x+*y;}
_bsp_op_addD(double *res, double *x, double *y, int nbytes) {*res = *x+*y;}

_bsp_op_multI(int    *res, int    *x, int    *y, int nbytes){*res=*x * *y;}
_bsp_op_multR(float  *res, float  *x, float  *y, int nbytes){*res=*x * *y;}
_bsp_op_multD(double *res, double *x, double *y, int nbytes){*res=*x * *y;}
d43 1
a43 1
_bsp_op_maxI(int    *res, int    *x, int    *y, int nbytes) {
d48 1
a48 1
_bsp_op_maxR(float  *res, float  *x, float  *y, int nbytes) {
d52 1
a52 1
_bsp_op_maxD(double *res, double *x, double *y, int nbytes) {
d56 1
a56 1
_bsp_op_minI(int    *res, int    *x, int    *y, int nbytes) {
d60 1
a60 1
_bsp_op_minR(float  *res, float  *x, float  *y, int nbytes) {
d64 1
a64 1
_bsp_op_minD(double *res, double *x, double *y, int nbytes) {
d69 10
a122 1
#endif
d135 1
@

head	1.1;
access;
symbols;
locks
	jonh:1.1; strict;
comment	@% @;


1.1
date	95.08.02.11.00.05;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id$
% $Log$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{A test suit for the new BSP library}

\begin{tabular}{llll}
Version & Processors & User & System & Wall & Page faults\\
Initial & 3          & 0.2  & 0.6    &  6   & 208        \\
Initial & 4          & 0.3  & 0.6    &  8   & 208        \\
Initial & 5          & 0.5  & 0.8    & 13   & 208        \\
Initial & 10         & 1.0  & 1.5    & 26   & 209        \\
Initial & 20         & 1.3  & 2.7    & 45   & 208        
\end{tabular}
 


\end{verbatim}

\begin{code}
#include <stdlib.h>
#include <stdio.h>
#include "bsp_lib.h"

#define ARRAY_SIZE    1000
#define ARRAY_SEGMENT 10

void int_add(result,x,y,nbytes)
int nbytes;
int *result, *x, *y;
{
   *result = *x + *y;
}


void main(int argc,char **argv) {
  int i,j, temp;
  int command_line_opts  = 1;
  int nprocs = 2;
  int my_pid; 
  int *ptr_int;

  int x[ARRAY_SIZE], y[ARRAY_SIZE],evens[ARRAY_SIZE];
  
  i=1;
  while (command_line_opts) {
    if (i == argc) {
      command_line_opts = 0;
    } else if ( (strcmp(argv[i],"-p")==0) &&
                (sscanf(argv[i+1],"%d",&temp))) {
      nprocs = temp;
      i += 2;
    }
  }
  bsp_start(nprocs,&nprocs,&my_pid);
     printf("Process %d started\n",my_pid);
     for(i=0; i<ARRAY_SIZE; i++) {
        x[i]     = 100*my_pid + i;
        evens[i] = 0;
      }

     bsp_sstep(1);
        bsp_addr(0,&y);
        bsp_addr(1,&evens);
        bsp_store((my_pid+1)%nprocs,&x,
                  0,0,sizeof(int)*ARRAY_SIZE);
        /* Rather stupid way of packing an  */
        /* array where each element is even */
        for(i=0,j=0; i<ARRAY_SIZE;i++) 
          if ((x[i]%2)==0) bsp_store((my_pid+1)%nprocs,
                                     &x[i],1,sizeof(int)*j++,sizeof(int));

     bsp_sstep_end(1);


     ptr_int  = (int*) malloc(sizeof(int));
     *ptr_int = my_pid;
     bsp_reduce(int_add,ptr_int,ptr_int,sizeof(int));
     printf("reduce(my_pid) = %d\n",*ptr_int,my_pid);

     if (my_pid==0) {
     bsp_print_start("Value for x[0:ARRAY_SEGMENT]");
       for(i=0; i<ARRAY_SEGMENT; i++) bsp_print_block("%-4d," ,x[i]);
       bsp_print_block("\n");
     bsp_print_end("Value for x[0:ARRAY_SEGMENT]");

     bsp_print_start("Value for y[0:ARRAY_SEGMENT]");
       for(i=0; i<ARRAY_SEGMENT; i++) bsp_print_block("%-4d," ,y[i]);
       bsp_print_block("\n");
     bsp_print_end("Value for y[0:ARRAY_SEGMENT]");

     bsp_print_start("Value for evens[0:ARRAY_SEGMENT]");
       for(i=0; i<ARRAY_SEGMENT; i++) bsp_print_block("%-4d," ,evens[i]); 
       bsp_print_block("\n");
     bsp_print_end("Value for evens[0:ARRAY_SEGMENT]");
   }
 
  bsp_finish();
  printf("Only process zero should get here. My pid=%d\n\n",my_pid);
}
\end{code}



@

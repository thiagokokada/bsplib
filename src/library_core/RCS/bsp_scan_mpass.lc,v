head	1.3;
access;
symbols;
locks; strict;
comment	@% @;


1.3
date	96.02.09.08.57.03;	author jonh;	state Exp;
branches;
next	1.2;

1.2
date	96.01.19.14.32.33;	author jonh;	state Exp;
branches;
next	1.1;

1.1
date	95.08.31.16.36.03;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.3
log
@moved to level1
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995, University of Oxford                         %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: bsp_scan_mpass.lc,v 1.2 1996/01/19 14:32:33 jonh Exp jonh $
% $Log: bsp_scan_mpass.lc,v $
% Revision 1.2  1996/01/19  14:32:33  jonh
% Changing to a generic BSP implementation
%
% Revision 1.1  1995/08/31  16:36:03  jonh
% Initial revision
%

\begin{code}
#include "bsp_lib.h"
#include "bsp_profile.h"
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Scan function}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void bsp_scan(void (*op)(void*,void*,void*,int*),
              void *src, void *dst, int nbytes) {
  int i;
  char *left  = malloc(nbytes),
       *right = malloc(nbytes);
#ifdef PROFILE
  bspprof_sstep_start(0,__LINE__,__FILE__);
#endif
  memcpy(right,src,nbytes);
  for(i=1;i<_bsp_nprocs;i*=2) {
    bsp_sstep(1);
      bsp_addr(0,left);
      if (_bsp_pid+i < _bsp_nprocs) 
        bsp_addr_store(_bsp_pid+i,right,0,0,nbytes);
    bsp_sstep_end(1);
    if (bsp_pid()>=i) op(right,left,right,&nbytes);
  }
  memcpy(dst,right,nbytes);
  free(left); free(right);  
#ifdef PROFILE
  bspprof_sstep_comm();
  bspprof_sstep_end();
  bspprof_sstep_inout_scancomm(nbytes,"bsp_scan");
#endif
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Reduce function}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Aliasing of src and dst is allowed.
\begin{code}
void bsp_reduce(void (*op)(void*,void*,void*,int*),
                void *src, void *dst, int nbytes) {
  int i;
  char *left  = malloc(nbytes),
       *right = malloc(nbytes);
#ifdef PROFILE
  bspprof_sstep_start(0,__LINE__,__FILE__);
#endif
  memcpy(right,src,nbytes);
  for(i=1;i<_bsp_nprocs;i*=2) {
    bsp_sstep(1);
      bsp_addr(0,left);
      if (_bsp_pid+i < _bsp_nprocs) 
        bsp_addr_store(_bsp_pid+i,right,0,0,nbytes);
    bsp_sstep_end(1);
    if (bsp_pid()>=i) op(right,left,right,&nbytes);
  }
  bsp_broadcast(_bsp_nprocs-1,right,dst,nbytes);
  free(left); free(right);  
#ifdef PROFILE
  bspprof_sstep_comm();
  bspprof_sstep_end();
  bspprof_sstep_inout_scancomm(nbytes,"bsp_reduce");
#endif
}
\end{code}
@


1.2
log
@Changing to a generic BSP implementation
@
text
@d17 1
a17 1
% $Id: bsp_scan_mpass.lc,v 1.1 1995/08/31 16:36:03 jonh Exp jonh $
d19 3
a30 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Function to cope with different argument order of MPL scan/reduce}
a31 24
\begin{code}
#ifdef MPASS_MPL
void (*_mpl_reduce_fn)();

void _bsp_flip(void *left, void* right, void* res, int *nbytes) {
  _mpl_reduce_fn(res,left,right,nbytes);
}
#else
#ifdef MPASS_MPI
void (*_mpi_assoc_op_hack)();

void _mpi_assoc_op(void *in, void* inout, int *len, MPI_Datatype *datatype) {
#ifdef SANITY_CHECK
  if (*datatype != MPI_BYTE)
    bsp_error("{bsp_[scan/reduce]} sanity check error");
#endif

  _mpi_assoc_op_hack(inout,in,inout,len);
}
#endif /* MPASS_MPI */
#endif /* MPASS_MPL */
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
a33 1
No aliasing of src and dst is allowed.
a34 1
#ifdef MPASS_MPL
d37 3
a39 3
  int   errno;
  char *copy_src;

d43 8
a50 13
  if (_bsp_nprocs <=1)
    memcpy(dst,src,nbytes);
  else {
    if (src==dst) {
      copy_src = malloc(nbytes);
      memcpy(copy_src,src,nbytes);
    } else {
      copy_src = src;
    }
    _mpl_reduce_fn = op;
    errno = mpc_prefix(copy_src,dst,nbytes,_bsp_flip,_mpass->group);
    if (errno) 
      bsp_error("{bsp_scan} failed");
d52 2
a59 40
#else
#ifdef MPASS_MPI
void bsp_scan(void (*op)(void*,void*,void*,int*),
              void *src, void *dst, int nbytes) {
  int errno;
  char *copy_src;
  MPI_Op *scan_fn;

#ifdef PROFILE
  bspprof_sstep_start(0,__LINE__,__FILE__);
#endif
  if (_bsp_nprocs <=1)
     memcpy(dst,src,nbytes);
  else { 
    if (src==dst) {
      copy_src = malloc(nbytes);
      memcpy(copy_src,src,nbytes);
    } else {
      copy_src = src;
    }
    scan_fn = (MPI_Op*) malloc(sizeof(MPI_Op));
    _mpi_assoc_op_hack = op;
    errno = MPI_Op_create(_mpi_assoc_op,0,scan_fn);
    if (errno) 
      bsp_error("{bsp_scan}: unable to register the function for the scan");
    errno = MPI_Scan(copy_src,dst,nbytes,MPI_BYTE,*scan_fn,_mpass->group);
    if (errno) 
      bsp_error("{bsp_scan}: failed");
    errno = MPI_Op_free(scan_fn);
    if (errno)
      bsp_error("{bsp_scan}: unable to deallocate associative operator");
  }
#ifdef PROFILE
  bspprof_sstep_comm();
  bspprof_sstep_end();
  bspprof_sstep_inout_scancomm(nbytes,"bsp_scan");
#endif
}
#endif /* MPASS_MPI */
#endif /* MPASS_MPL */
a66 33
#ifdef MPASS_MPL
void bsp_reduce(void (*op)(void*,void*,void*,int*),
                void *src, void *dst, int nbytes) {
  int errno;
  char *copy_src;

#ifdef PROFILE
  bspprof_sstep_start(0,__LINE__,__FILE__);
#endif
  if (_bsp_nprocs <=1)
    memcpy(dst,src,nbytes);
  else {
    if (src==dst) {
      copy_src = malloc(nbytes);
      if (copy_src==NULL)
        bsp_error("{bsp_reduce}: failed to allocate %d bytes",nbytes);
      memcpy(copy_src,src,nbytes);
    } else {
      copy_src = (char*) src;
    }
    _mpl_reduce_fn = op;
    errno = mpc_combine(copy_src,dst,nbytes,_bsp_flip,_mpass->group);
    if (errno) 
      bsp_error("{bsp_reduce} failed to perform reduce");
  }
#ifdef PROFILE
  bspprof_sstep_comm();
  bspprof_sstep_end();
  bspprof_sstep_inout_scancomm(nbytes,"bsp_reduce");
#endif
}
#else
#ifdef MPASS_MPI
d69 3
a71 4
  int errno;
  char *copy_src;
  MPI_Op *reduce_fn;

d75 8
a82 22
  if (_bsp_nprocs <=1)
    memcpy(dst,src,nbytes);
  else {
    if (src==dst) {
      copy_src = malloc(nbytes);
      memcpy(copy_src,src,nbytes);
    } else {
      copy_src = src;
    }
    reduce_fn = (MPI_Op*) malloc(sizeof(MPI_Op));
    _mpi_assoc_op_hack = op;
    errno = MPI_Op_create(_mpi_assoc_op,0,reduce_fn);
    if (errno) 
      bsp_error("{bsp_reduce}: unable to register the function for the scan");

    errno = MPI_Allreduce(copy_src,dst,nbytes,MPI_BYTE,*reduce_fn,
                          _mpass->group);
    if (errno) 
      bsp_error("{bsp_reduce}: failed");
    errno = MPI_Op_free(reduce_fn);
    if (errno)
      bsp_error("{bsp_reduce}: unable to deallocate associative operator");
d84 2
a91 2
#endif /* MPASS_MPI */
#endif /* MPASS_MPL */
@


1.1
log
@Initial revision
@
text
@d17 5
a21 2
% $Id$
% $Log$
d35 1
a35 1
void _bsp_flip(void *left, void* right, void* res, int nbytes) {
d48 1
a48 1
  _mpi_assoc_op_hack(inout,in,inout,*len);
d60 1
a60 1
void bsp_scan(void (*op)(void*,void*,void*,int),
d62 2
a63 1
  int errno;
d65 2
a66 4
  if (_bsp_nprocs > 1) {
#ifdef SANITY_CHECK
    if (src==dst)
      bsp_error("{bsp_scan} no aliasing of src and dst allowed");
d68 9
d78 1
a78 1
    errno = mpc_prefix(src,dst,nbytes,_bsp_flip,_mpass->group);
d82 5
d90 1
a90 1
void bsp_scan(void (*op)(void*,void*,void*,int),
d93 1
d96 2
a97 4
  if (_bsp_nprocs > 1) {
#ifdef SANITY_CHECK
    if (src==dst)
      bsp_error("{bsp_scan} no aliasing of src and dst allowed");
d99 9
d113 1
a113 1
    errno = MPI_Scan(src,dst,nbytes,MPI_BYTE,*scan_fn,_mpass->group);
d120 5
d136 1
a136 1
void bsp_reduce(void (*op)(void*,void*,void*,int),
d139 1
d141 2
a142 4
  if (_bsp_nprocs > 1) {
#ifdef SANITY_CHECK
    if (src==dst)
      bsp_error("{bsp_reduce} no aliasing of src and dst allowed");
d144 11
d156 1
a156 1
    errno = mpc_combine(src,dst,nbytes,_bsp_flip,_mpass->group);
d160 5
d168 1
a168 1
void bsp_reduce(void (*op)(void*,void*,void*,int),
d171 1
d174 2
a175 4
  if (_bsp_nprocs > 1) {
#ifdef SANITY_CHECK
    if (src==dst)
      bsp_error("{bsp_reduce} no aliasing of src and dst allowed");
d177 9
d192 1
a192 1
    errno = MPI_Allreduce(src,dst,nbytes,MPI_BYTE,*reduce_fn,
d200 5
@

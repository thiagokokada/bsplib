%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995,1996,1997 University of Oxford                %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id$
% $Log$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{The include files}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
#include <windows.h>
#include <process.h>
#include <time.h>
#include <signal.h>
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Misc preamble}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}

#define shared_memory_handle int

\end{code}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{System V-like shared memory support for Win32}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{code}
/* The actual semaphore type. */
typedef struct {
                volatile int *sema_value;
                volatile LPLONG mutex_identifier;
} semaphore_t;

typedef semaphore_t* semaphore;

#define new_sema(handle,val) nt_new_sema(handle,val,__LINE__,__FILE__)
#define Psema(sema) nt_Psema(sema,__LINE__,__FILE__)
#define Vsema(sema) nt_Vsema(sema,__LINE__,__FILE__)
#define Tema(sema) nt_Tsema(sema,__LINE__,__FILE__)
#define CPsema(sema) nt_CPsema(sema,__LINE__,__FILE__)

semaphore       nt_new_sema(shared_memory_handle, int, int, char*);
void            nt_Psema(semaphore, int, char*);
void            nt_Vsema(semaphore, int, char*);
int             nt_Tsema(semaphore, int, char*);
int             nt_CPsema(semaphore, int, char*);

#define spinlock_type        volatile LPLONG
#define spinlock_type_size   (SIZEOF(spinlock_type))

#define new_spinlock(shared_memory_handle) nt_new_spinlock(shared_memory_handle, __LINE__, __FILE__)
#define test_spinlock(lock) nt_test_spinlock(lock, __LINE__, __FILE__)
#define set_spinlock(lock) nt_set_spinlock(lock, __LINE__, __FILE__)
#define unset_spinlock(lock) nt_unset_spinlock(lock, __LINE__, __FILE__)
#define conshortset_spinlock(lock) nt_conshortset_spinlock(lock, __LINE__, __FILE__) 
#define conlongset_spinlock(lock) nt_conlongset_spinlock(lock, __LINE__, __FILE__) 

spinlock_type  nt_new_spinlock(shared_memory_handle, int, char*);
int nt_test_spinlock(spinlock_type, int, char*);
void nt_set_spinlock(spinlock_type, int, char*);
void nt_unset_spinlock(spinlock_type, int, char*);

int nt_conshortset_spinlock(spinlock_type, int, char*);
int nt_conlongset_spinlock(spinlock_type, int, char*);

extern int _bsp_firstprocess;
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Misc. prototypes}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{code}
#define sleep(arg) Sleep(arg)

#define ENV_STRING_SIZE 26
char bsp_env_string[ENV_STRING_SIZE];
HANDLE          parent_process;
HANDLE*         nt_bsp_handle_array;

/* Process creation. */
#define SIGHUP SIGABRT
#define SIGQUIT SIGABRT
#define SIGBUS SIGABRT
#define SIGSYS SIGABRT

int fork();

/* 
 * The code which implements the shared memory interface 
 */

/* This Handle to the segment needs to be global, 
   so everyone can see it. 
 */
HANDLE 		nt_the_real_shmem_segment;

#define NT_SHMEM_SHARED_SLOSH 20000
#define NT_SHMEM_PROC_SLOSH    4048
/* This is extra for my shared memory pool */
#define NT_SHMEM_ERROR_EXTRA    300
#define NT_SHMEM_PROC_ERROR     200

extern char*    _the_entire_shared_memory_segment;
extern int      _nbytes_of_shared_memory_segment_free;
void		shmem_create_memory_segment(shared_memory_handle handle, 
                                            int nprocs, int no_bytes);
#define         shmem_closedown_shared_memory(handle) /* Do nothing */

int _pid;
void set_getpid();
#define getpid() _pid

int _ppid;
void set_getppid();
#define getppid() _ppid

BOOL _bsp_firstprocess;
void bsp_set_firstprocess();
#define bsp_firstprocess() _bsp_firstprocess

int _bsp_pid_copy;
void bsp_set_pid();

void bsp_set_nprocs();

int _bsp_ppid;
void bsp_set_ppid();
#define bsp_get_ppid() _bsp_ppid

int kill(int pid, int signal);

void signal_shutdown(int signal_value);
void kill_all_processors(int);
void kill_process(int);
void bsp_time_init();
void bsp_time_stop();
void bsp_time_restart();

/* Some little macros to help us along */
#ifndef SIZEOF
#define SIZEOF(x) sizeof(x)
#endif

#define sleep(x) Sleep(x)

/*
 * Per process globals
 */
extern int      _bsp_nprocs;
extern int*     _bsp_children;
extern int      _bsp_pid;

/* This should really be put beside the one in bsp_shmem.lh */

#if defined TURBO
#define nt_release_processor() /* do nothing */
#else
#define nt_release_processor() Sleep(0)
#endif
\end{code}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995,1996,1997 University of Oxford                %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id$
% $Log$

\begin{code}
#include "daVinci.h"
#include "symbol.h"
#include "cgprof.h"
#include "matrix.h"
\end{code}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data structures}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
int                 raw_profile_next=0;
int                 raw_profile_size=0;
parsed_cost_object *raw_profile=NULL;
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Create/grow data sequence of raw profile data}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void enlargeRawProfile() {

  if (raw_profile_size==0) {
    raw_profile_next = 0;
    raw_profile_size = RAW_PROFILE_INIT_SIZE;
    raw_profile      = calloc(raw_profile_size,sizeof(parsed_cost_object));
  } else {
    raw_profile_size += RAW_PROFILE_INIT_SIZE;
    raw_profile       = realloc(raw_profile,
				 raw_profile_size*sizeof(parsed_cost_object));
  }
  if (raw_profile==NULL) {
    fprintf(stderr,"{enlargeRawProfile} unable to allocate %d elements",
            raw_profile_size);
    exit(1);
  }
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Function that adds two cost centers together}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This will be used to generate the inheretance profile.
\begin{code}
void add_costs(object_cost *left, object_cost right) {
  int i;

  left->syncs         += right.syncs;
  left->comp_max      += right.comp_max;
  left->comp_avg      += right.comp_avg;
  left->comp_min      += right.comp_min;
  left->comm_max      += right.comm_max;
  left->comm_avg      += right.comm_avg;
  left->comm_min      += right.comm_min;
  left->comp_idle_max += right.comp_idle_max;
  left->comp_idle_avg += right.comp_idle_avg;
  left->comp_idle_min += right.comp_idle_min;
  left->hrel_max      += right.hrel_max;
  left->hrel_avg      += right.hrel_avg;
  left->hrel_min      += right.hrel_min;
  if ((left->proc==NULL) || (right.proc==NULL)) {
    fprintf(stderr,"Cost is null");
    exit(0);
  }
  for(i=0;i<bsp_p;i++) {
    left->proc[i].proc_comp       +=right.proc[i].proc_comp;
    left->proc[i].proc_comm       +=right.proc[i].proc_comm;
    left->proc[i].proc_comp_idle  +=right.proc[i].proc_comp_idle;
    left->proc[i].proc_hrel_in    +=right.proc[i].proc_hrel_in;
    left->proc[i].proc_hrel_out   +=right.proc[i].proc_hrel_out;
  }
}
\end{code}

\begin{code}
int ignore_function(char *fname) {
  return 0;
  return ((strcmp(fname,"cppsync_")==0) || 
          (strcmp(fname,"CPPSYNC")==0) || 
	  (strcmp(fname,"cppsync_number_")==0) ||
          (strcmp(fname,"CPPSYNC_NUMBER")==0));
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Read and create the raw profile data structure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void readRawProfile(FILE *fptr,int *nonodes) {
  char    line[MAX_PROFILE_LINE_LENGTH];
  char    stack[MAX_PROFILE_LINE_LENGTH];
  char    rest[MAX_PROFILE_LINE_LENGTH];
  int     i,nolines,sstepline,syncs;
  char   *ptr,*drag;
  float   comp_max,      comp_avg,      comp_min,
          comm_max,      comm_avg,      comm_min,
          comp_idle_max, comp_idle_avg, comp_idle_min;
  long int hmax,havg,hmin;
  int     *result;


  nolines=0;
  while (fgets(line,MAX_PROFILE_LINE_LENGTH,fptr)) {
    if (sscanf(line,"A <%d of %[^>] > with %d SYNCS %f %f %f COMP "
                    "%f %f %f COMM %f %f %f COMPIDLE %ld %ld %ld HREL %s",
		     &sstepline,stack,
		     &syncs,
	             &comp_max,&comp_avg,&comp_min,
	             &comm_max,&comm_avg,&comm_min,
	             &comp_idle_max, &comp_idle_avg, &comp_idle_min,
	             &hmax,&havg,&hmin,rest)==16) {

 
      if (raw_profile_next==raw_profile_size) enlargeRawProfile();
      raw_profile[raw_profile_next].active            = 1;
      raw_profile[raw_profile_next].cost.syncs        = syncs;
      raw_profile[raw_profile_next].cost.comp_max     = comp_max;
      raw_profile[raw_profile_next].cost.comp_avg     = comp_avg;
      raw_profile[raw_profile_next].cost.comp_min     = comp_min;
      raw_profile[raw_profile_next].cost.comm_max     = comm_max;
      raw_profile[raw_profile_next].cost.comm_avg     = comm_avg;
      raw_profile[raw_profile_next].cost.comm_min     = comm_min;
      raw_profile[raw_profile_next].cost.comp_idle_max= comp_idle_max;
      raw_profile[raw_profile_next].cost.comp_idle_avg= comp_idle_avg;
      raw_profile[raw_profile_next].cost.comp_idle_min= comp_idle_min;
      raw_profile[raw_profile_next].cost.hrel_max     = hmax;
      raw_profile[raw_profile_next].cost.hrel_avg     = havg;
      raw_profile[raw_profile_next].cost.hrel_min     = hmin;

      raw_profile[raw_profile_next].stack=calloc(MAX_STACK_DEPTH,
						 sizeof(int));
      if (raw_profile[raw_profile_next].stack==NULL) {
        fprintf(stderr,"{readRawProfile} unable to allocate stack entry");
        exit(1);
      }

      if (Verbose) fprintf(log,"STACK=\"%s\"\n",stack);
      raw_profile[raw_profile_next].stack_size=1;
      for(ptr=stack; ((*ptr)!=' ') && (*ptr!=',');ptr++) {}
      fprintf(log,"TOS=%d at line %d\n",*ptr,sstepline);
      if (*ptr==' ') 
        raw_profile[raw_profile_next].stack[0]
          =lookupSymbolTable(CG_SSTEP,sstepline,(*ptr='\0',stack));
      else
        raw_profile[raw_profile_next].stack[0]
          =lookupSymbolTable(CG_STACK,sstepline,(*ptr='\0',stack));
      ptr++;
      drag=ptr;
      for(;*ptr;ptr++) {
        if (*ptr==',') {
	  *ptr='\0';
          if (Verbose) fprintf(log,"NAME=\"%s\"\n",drag);
          if (!ignore_function(drag)) {
            raw_profile[raw_profile_next].stack[
              raw_profile[raw_profile_next].stack_size++]
              = lookupSymbolTable(CG_STACK,0,drag);
	  }
          drag = ptr+1;
        }
      }
      raw_profile[raw_profile_next].cost.proc
	=calloc(bsp_p,sizeof(object_cost_proc));
      if (raw_profile[raw_profile_next].cost.proc==NULL) {
	fprintf(stderr,"Unable to allocate storage");
	exit(0);
      }
  
      for(i=0;i<bsp_p;i++) {
	sscanf(rest,"%f,%f,%f,%d,%d;%s",
	       &comp_max,&comm_max,&comp_idle_max,&hmax,&hmin,rest);
	raw_profile[raw_profile_next].cost.proc[i].proc_comp     =comp_max;
	raw_profile[raw_profile_next].cost.proc[i].proc_comm     =comm_max;
	raw_profile[raw_profile_next].cost.proc[i].proc_comp_idle=comp_idle_max;
	raw_profile[raw_profile_next].cost.proc[i].proc_hrel_in  =hmax;
	raw_profile[raw_profile_next].cost.proc[i].proc_hrel_out =hmin;
      }

      raw_profile_next++;
      nolines++; 
    }
  }
  *nonodes = symbol_table_next;
  if (Verbose) fprintf(log,"%s: read %d lines from profile.\n",Pgm,nolines);
}
\end{code}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Pretty print the raw profile data}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void printRawProfile() {
  int i,j;
  object_cost *cost;
  int         *stack;
  
  fprintf(log,"\n\nRAW DATA:\n");
  for(i=0;i<raw_profile_next;i++) {
    cost  = &raw_profile[i].cost;
    stack = raw_profile[i].stack;
    fprintf(log,"Stack=[");
    for(j=0;j<raw_profile[i].stack_size;j++) 
      printSymbolTable_entry(stack[j]);
    fprintf(log,"] %d Syncs %f Comp %f Comm %f Wait\n\n",
	    cost->syncs,cost->comp_max,cost->comm_max,cost->comp_idle_max);
  }
}
\end{code}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Create connectivity matrix}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{code}
void createConnectivityMatrix(int NoNodes,Matrix *graph,
			      Matrix *costs,int *root) {
  object_cost zero_cost,*update;
  int i,j,this,next;


  zero_cost.comp_max     =0.0;
  zero_cost.comp_avg     =0.0;
  zero_cost.comp_min     =0.0;
  zero_cost.comm_max     =0.0;
  zero_cost.comm_avg     =0.0;
  zero_cost.comm_min     =0.0;
  zero_cost.comp_idle_max=0.0;
  zero_cost.comp_idle_avg=0.0;
  zero_cost.comp_idle_min=0.0;
  zero_cost.hrel_max     =0;
  zero_cost.hrel_avg     =0;
  zero_cost.hrel_min     =0;
  zero_cost.syncs=0;
  zero_cost.proc = NULL;
  *graph = newMat(NoNodes,NoNodes,sizeof(int),(i=0,&i));
  *costs = newMat(NoNodes,1,sizeof(object_cost),&zero_cost);
  for(i=0;i<NoNodes;i++) {
    update=&Mat(object_cost,*costs,i,0);
    update->proc=calloc(bsp_p,sizeof(object_cost_proc));
    if (update->proc==NULL){
      fprintf(stderr,"Unable to allocate storage");
      exit(0);
    }
    for(j=0;j<bsp_p;j++) {
      update->proc[j].proc_comp      =0.0;
      update->proc[j].proc_comm      =0.0;
      update->proc[j].proc_comp_idle =0.0;
      update->proc[j].proc_hrel_in   =0;
      update->proc[j].proc_hrel_out  =0;
    }
  }
      
  for(i=0;i<raw_profile_next;i++) {
    if (raw_profile[i].active) {
      this = raw_profile[i].stack[0];
      next = this;
      Mat(int,*graph,this,next) = 1;
      update = &Mat(object_cost,*costs,next,0);
      add_costs(update,raw_profile[i].cost);
      for(j=1;j<raw_profile[i].stack_size;j++) {
        this = next;
        next = raw_profile[i].stack[j];
        Mat(int,*graph,next,this)=1;
	update = &Mat(object_cost,*costs,next,0);
        add_costs(update,raw_profile[i].cost);
      }
    }
  }
  *root =  raw_profile[0].stack[raw_profile[0].stack_size-1];

  /* Check graph isn't empty */
  if (!Mat_dense(*costs,*root,0)) *root=-1;
}
\end{code}

\begin{code}
void printConnectivityMatrix(Matrix graph,Matrix costs,int root) { 
  int i,j;
  object_cost cost;

  fprintf(log,"Root node is %d\n",root);
  for(i=0;i<graph.rows;i++) {
    fprintf(log,"%4d)",i);
    printSymbolTable_entry(i);
    cost = Mat(object_cost,costs,i,0);
    fprintf(log,"%d %f %f %f\n\tBranch=[",
	    cost.syncs,cost.comp_max,cost.comm_max,cost.comp_idle_max);
    for(j=0;j<graph.cols;j++) 
      if (Mat_dense(graph,i,j)) fprintf(log,"%d ",j);
    fprintf(log,"]\n\n");
  }
}
\end{code}


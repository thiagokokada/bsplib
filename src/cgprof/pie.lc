%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995,1996,1997 University of Oxford                %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id$
% $Log$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Tcl pie chart update}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
#include "daVinci.h"

#define MAX_COMBINE  0.15
#define CAN_COMBINE  0.05

void tclPieInit() {
  int i;

  cmdDaVinci("tcl(eval_file(\"%s/cgprof.tcl\"))",INCLUDEDIR);
  cmdDaVinci("tcl(eval(\"set piecolour %s;\"))",(Colour)?"color":"gray");
  if (bsp_p>8) {
    cmdDaVinci("tcl(eval(\".buttons.combine select;\"))");
    PieCombine=1;
  } else {
    PieCombine=0;
  }
}

void tclPieSegment(object_cost *ptr,int type, int pid,
                   double *ratio, double *value,char **format) {
  long int hrel_tot=0;
  double comm_tot=0.0, comp_tot=0.0, wait_tot=0.0;
  static char format_str[100];
  int i;
  
  for(i=0;i<bsp_p;i++) {
    hrel_tot += PAIRMAX(ptr->proc[i].proc_hrel_in,ptr->proc[i].proc_hrel_out);
    comm_tot += ptr->proc[i].proc_comm;
    comp_tot += ptr->proc[i].proc_comp;
    wait_tot += ptr->proc[i].proc_comp_idle;
  }

  switch (type) {
    case TCL_COMP:
      *ratio = (comp_tot<=0.0)?0.0:(ptr->proc[pid].proc_comp/comp_tot);
      if (comp_tot<1.0) {
        *value = 1000.0*ptr->proc[pid].proc_comp;
        strcpy(format_str,"%.2fms");
      } else {
        *value = ptr->proc[pid].proc_comp;
        strcpy(format_str,"%.2fs");
      }
      break;
    case TCL_COMM:
      *ratio = (comm_tot<=0.0)?0.0:(ptr->proc[pid].proc_comm/comm_tot);
      if (comm_tot<1.0) {
        *value = 1000.0*ptr->proc[pid].proc_comm;
        strcpy(format_str,"%.2fms");
      } else {
        *value = ptr->proc[pid].proc_comm;
        strcpy(format_str,"%.2fs");
      }
      break;
    case TCL_WAIT:
      *ratio = (wait_tot<=0.0)?0.0:(ptr->proc[pid].proc_comp_idle/wait_tot);
      if (wait_tot<1.0) {
        *value = 1000.0*ptr->proc[pid].proc_comp_idle;
        strcpy(format_str,"%.2fms");
      } else {
        *value = ptr->proc[pid].proc_comp_idle;
        strcpy(format_str,"%.2fs");
      }
      break;
    case TCL_HREL: 
      if (ptr->proc[pid].proc_hrel_in>ptr->proc[pid].proc_hrel_out) {
	*ratio =(hrel_tot<=0)?0.0:
	          ((double)ptr->proc[pid].proc_hrel_in)/((double)hrel_tot);
        *value = (double) ptr->proc[pid].proc_hrel_in;
      } else {
        *ratio =(hrel_tot<=0)?0.0:
	          ((double)ptr->proc[pid].proc_hrel_out)/((double)hrel_tot);
        *value =(double) ptr->proc[pid].proc_hrel_out;
      }
      strcpy(format_str,"%.1e");
      break;
    }
    *format = format_str;
}

void tclPieUpdate(object_cost *ptr,int node, int type) {
  int i,j,range_proc,segment; 
  double accum_ratio, equal_ratio,this_ratio, accum_value, this_value;
  static double *accum_values=NULL, *accum_ratios=NULL;
  static int *ranges_low=NULL, *ranges_high=NULL;
  char *format;
 
  if (accum_values==NULL) {
    accum_values = calloc(bsp_p,sizeof(double));
    accum_ratios = calloc(bsp_p,sizeof(double));
    ranges_low   = calloc(bsp_p,sizeof(int));
    ranges_high  = calloc(bsp_p,sizeof(int));
    if (accum_values==NULL || accum_ratios==NULL || 
        ranges_low==NULL   || ranges_high==NULL) {
      fprintf(stderr,"Unable to allocate memory");
      exit(0);
    }
  }
  printf("tcl(eval(\"");

  printf("set topmessage \\\"");
  switch (type) {
  case TCL_COMP: printf("Time spent in local computation");break;
  case TCL_COMM: printf("Time spent in communication");break;
  case TCL_WAIT: printf("Time spent waiting at a barrier");break;
  case TCL_HREL: printf("H-relation size");break;
  }
  printf(" for %d supersteps.\\\";",ptr->syncs);  

  printf("delete pie $pie_idle;createPieChart;");
  range_proc=0;
  accum_ratio=0.0;
  accum_value=0.0;
  equal_ratio=-1.0;
  segment=0;
  for(i=0;i<bsp_p;i++) {
     tclPieSegment(ptr,type,i,&this_ratio,&this_value,&format);
     if (equal_ratio<0.0) equal_ratio = this_ratio;
     if ((!PieCombine)  ||
         (i==(bsp_p-1)) || 
         (this_ratio>CAN_COMBINE) ||
         (this_ratio + accum_ratio >MAX_COMBINE)) {
       if ((i!=range_proc) && (this_ratio>CAN_COMBINE)) {
         i--;
         this_ratio=0.0;
         this_value=0.0;
       }
       accum_values[segment] = (this_value+accum_value)/(1+i-range_proc);
       accum_ratios[segment] = (this_ratio+accum_ratio)/(1+i-range_proc);
       ranges_low[segment]=range_proc;
       ranges_high[segment++]=i;
       range_proc=i+1;
       accum_ratio=0.0;
       accum_value=0.0;
       equal_ratio=-1.0;
     } else {
       accum_ratio+=this_ratio;
       accum_value+=this_value;
     }
  }
  accum_ratio = 0.0;
  for(i=0;i<segment;i++) accum_ratio +=accum_ratios[i];
  for(i=0;i<segment;i++) {
    if (ranges_low[i]==ranges_high[i])
      printf("set slice%d  [pie::newSlice $pie_idle \\\"Proc %d\\\"];",
             i,ranges_low[i]);
    else
      printf("set slice%d  [pie::newSlice $pie_idle \\\"Procs %d-%d\\\"];",
             i,ranges_low[i],ranges_high[i]);
    printf("pie::sizeSlice $pie_idle $slice%d %f \\\"",
	   i,accum_ratios[i]/accum_ratio);
    printf(format,accum_values[i]);
     printf("\\\";");
  }
  printf("\"))\n");
}
\end{code}

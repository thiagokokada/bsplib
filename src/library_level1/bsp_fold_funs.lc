%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995,1996,1997 University of Oxford                %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: bsp_scan.lc,v 1.1 1995/08/31 16:35:33 jonh Exp jonh $
% $Log: bsp_scan.lc,v $
% Revision 1.1  1995/08/31  16:35:33  jonh
% Initial revision
%

\begin{code}
#include "bsp.h"
#include "bsp_level1.h"
#include "bsp_f77_names.h"
#include <stdlib.h>

static int    ires;
static float  fres;
static double dres;
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Instances of scan and reduce}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{code}
void _bsp_op_addI(int    *res,int    *x,int    *y,int *nbytes) {*res = *x+*y;}
void _bsp_op_andI(int    *res,int    *x,int    *y,int *nbytes) {*res = *x&&*y;}
void _bsp_op_orI(int     *res,int    *x,int    *y,int *nbytes) {*res = *x||*y;}
void _bsp_op_addR(float  *res,float  *x,float  *y,int *nbytes) {*res = *x+*y;}
void _bsp_op_addD(double *res,double *x,double *y,int *nbytes) {*res = *x+*y;}
void _bsp_op_multI(int    *res,int    *x,int    *y,int *nbytes){*res=*x * *y;}
void _bsp_op_multR(float  *res,float  *x,float  *y,int *nbytes){*res=*x * *y;}
void _bsp_op_multD(double *res,double *x,double *y,int *nbytes){*res=*x * *y;}
void _bsp_op_eqI(int     *res,int    *x,int    *y,int *nbytes){*res=*x == *y;}

void _bsp_op_maxI(int    *res, int    *x, int    *y, int *nbytes) {
  *res = (*x>*y)?*x:*y;
}


void _bsp_op_maxR(float  *res, float  *x, float  *y, int *nbytes) {
  *res = (*x>*y)?*x:*y;
}

void _bsp_op_maxD(double *res, double *x, double *y, int *nbytes) {
  *res = (*x>*y)?*x:*y;
}

void _bsp_op_minI(int    *res, int    *x, int    *y, int *nbytes) {
  *res = (*x<*y)?*x:*y;
}

void _bsp_op_minR(float  *res, float  *x, float  *y, int *nbytes) {
  *res = (*x<*y)?*x:*y;
}

void _bsp_op_minD(double *res, double *x, double *y, int *nbytes) {
  *res = (*x<*y)?*x:*y;
}
\end{code}


%%%%%%%%%%%%%
\subsection{Initialisation}
%%%%%%%%%%%%%
\begin{code}
void bsp_fold_funs_init() {
  bsp_pushregister(&ires,sizeof(int));
  bsp_pushregister(&fres,sizeof(float));
  bsp_pushregister(&dres,sizeof(double));
  bsp_sync();
}
\end{code}

%%%%%%%%%%%%%
\subsection{All and Any}
%%%%%%%%%%%%%
\begin{code}
int bsp_any(int x) {
  bsp_fold(_bsp_op_orI,&x,&ires,sizeof(int));
  return ires;
}

int bsp_all(int x) {
  bsp_fold(_bsp_op_andI,&x,&ires,sizeof(int));
  return ires;
}

int bsp_any_prefix(int x) {
  bsp_scan(_bsp_op_orI,&x,&ires,sizeof(int));
  return ires;
}

int bsp_all_prefix(int x) {
  bsp_scan(_bsp_op_andI,&x,&ires,sizeof(int));
  return ires;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Constant}
%%%%%%%%%%%%%
\begin{code}
/* Cannot use bsp_fold as bsp_fold calls this function ;-) */
int bsp_constantI(int x) {
  int i,result=1, *xs = calloc(bsp_nprocs(),sizeof(int));
  if (xs==NULL)
    bsp_abort("{bsp_constantI} unable to allocate memory");
  bsp_pushregister(xs,bsp_nprocs()*sizeof(int));
  bsp_sync();

  for(i=0;i<bsp_nprocs();i++)
    bsp_hpput(i,&x,xs,bsp_pid()*sizeof(int),sizeof(int));
  bsp_sync();
  for(i=1;i<bsp_nprocs();i++)
    if (xs[0]!=xs[i]) result = 0;
  bsp_pop_reg(xs);
  free(xs);
  return result;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Sum} 
%%%%%%%%%%%%%
\begin{code}
int bsp_sumI(int x) {

  bsp_fold(_bsp_op_addI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_sumR(float x) {
  bsp_fold(_bsp_op_addR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_sumD(double x) {
  bsp_fold(_bsp_op_addD,&x,&dres,sizeof(double));
  return dres;
}

int bsp_sumI_prefix(int x) {
  bsp_scan(_bsp_op_addI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_sumR_prefix(float x) {
  bsp_scan(_bsp_op_addR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_sumD_prefix(double x) {
  bsp_scan(_bsp_op_addD,&x,&dres,sizeof(double));
  return dres;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Product}
%%%%%%%%%%%%%
\begin{code}
int bsp_productI(int x) {
  bsp_fold(_bsp_op_multI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_productR(float x) {
  bsp_fold(_bsp_op_multR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_productD(double x) {
  bsp_fold(_bsp_op_multD,&x,&dres,sizeof(double));
  return dres;
}

int bsp_productI_prefix(int x) {
  bsp_scan(_bsp_op_multI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_productR_prefix(float x) {
  bsp_scan(_bsp_op_multR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_productD_prefix(double x) {
  bsp_scan(_bsp_op_multD,&x,&dres,sizeof(double));
  return dres;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Maximum}
%%%%%%%%%%%%%
\begin{code}
int bsp_maxI(int x) {
  bsp_fold(_bsp_op_maxI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_maxR(float x) {
  bsp_fold(_bsp_op_maxR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_maxD(double x) {
  bsp_fold(_bsp_op_maxD,&x,&dres,sizeof(double));
  return dres;
}

int bsp_maxI_prefix(int x) {
  bsp_scan(_bsp_op_maxI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_maxR_prefix(float x) {
  bsp_scan(_bsp_op_maxR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_maxD_prefix(double x) {
  bsp_scan(_bsp_op_maxD,&x,&dres,sizeof(double));
  return dres;
}
\end{code}

%%%%%%%%%%%%%
\subsection{Mimimum}
%%%%%%%%%%%%%
\begin{code}
int bsp_minI(int x) {
  bsp_fold(_bsp_op_minI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_minR(float x) {
  bsp_fold(_bsp_op_minR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_minD(double x) {
  bsp_fold(_bsp_op_minD,&x,&dres,sizeof(double));
  return dres;
}

int bsp_minI_prefix(int x) {
  bsp_scan(_bsp_op_minI,&x,&ires,sizeof(int));
  return ires;
}

float bsp_minR_prefix(float x) {
  bsp_scan(_bsp_op_minR,&x,&fres,sizeof(float));
  return fres;
}

double bsp_minD_prefix(double x) {
  bsp_scan(_bsp_op_minD,&x,&dres,sizeof(double));
  return dres;
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Instances of scan and reduce}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
int BSPALL(int *x)               {return(bsp_all(*x));}
int BSPANY(int *x)               {return(bsp_any(*x));}

int    BSPSUMI(int *x)           {return(bsp_sumI(*x));}
float  BSPSUMR(float *x)         {return(bsp_sumR(*x));}
double BSPSUMD(double *x)        {return(bsp_sumD(*x));}
int    BSPSUMI_PREFIX(int *x)    {return(bsp_sumI_prefix(*x));}
float  BSPSUMR_PREFIX(float *x)  {return(bsp_sumR_prefix(*x));}
double BSPSUMD_PREFIX(double *x) {return(bsp_sumD_prefix(*x));}

int    BSPPRODUCTI(int *x)           {return(bsp_productI(*x));}
float  BSPPRODUCTR(float *x)         {return(bsp_productR(*x));}
double BSPPRODUCTD(double *x)        {return(bsp_productD(*x));}
int    BSPPRODUCTI_PREFIX(int *x)    {return(bsp_productI_prefix(*x));}
float  BSPPRODUCTR_PREFIX(float *x)  {return(bsp_productR_prefix(*x));}
double BSPPRODUCTD_PREFIX(double *x) {return(bsp_sumD_prefix(*x));}

int    BSPMAXI(int *x)           {return(bsp_maxI(*x));}
float  BSPMAXR(float *x)         {return(bsp_maxR(*x));}
double BSPMAXD(double *x)        {return(bsp_maxD(*x));}
int    BSPMAXI_PREFIX(int *x)    {return(bsp_maxI_prefix(*x));}
float  BSPMAXR_PREFIX(float *x)  {return(bsp_maxR_prefix(*x));}
double BSPMAXD_PREFIX(double *x) {return(bsp_maxD_prefix(*x));}

int    BSPMINI(int *x)           {return(bsp_minI(*x));}
float  BSPMINR(float *x)         {return(bsp_minR(*x));}
double BSPMIND(double *x)        {return(bsp_minD(*x));}
int    BSPMINI_PREFIX(int *x)    {return(bsp_minI_prefix(*x));}
float  BSPMINR_PREFIX(float *x)  {return(bsp_minR_prefix(*x));}
double BSPMIND_PREFIX(double *x) {return(bsp_minD_prefix(*x));}
\end{code}



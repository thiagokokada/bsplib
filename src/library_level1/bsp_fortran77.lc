%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995,1996,1997 University of Oxford                %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id$
% $Log$
\begin{code}
#include "bsp.h"
#include "bsp_f77_names.h"
#include <stdlib.h>
#ifdef CRAYMPP
#include <fortran.h>
extern char *bsp_craystr_cstr(_fcd);
#endif

int *f77_sstep_numbers;
\end{code}

Language specific binding that hide the programmer from the ``memory
copying'' nature of the BSP DRMA calls.

\begin{code}
void bsp_f77_init() {
  f77_sstep_numbers = calloc(bsp_nprocs(),sizeof(int));
  if (f77_sstep_numbers==NULL)
    bsp_abort("{bsp_f77_init} unable to allocate storage");
  bsp_pushregister(f77_sstep_numbers,bsp_nprocs()*sizeof(int));
  bsp_sync();
}

void BSPPUT_COMMON(int *pid, void *src, void *reg, void *dst, int *nbytes){
  bsp_put(*pid,src,reg,(char*)dst - (char*) reg,*nbytes);
}

void BSPHPPUT_COMMON(int *pid, void *src, void *reg, void *dst, int *nbytes){
  bsp_hpput(*pid,src,reg,(char*)dst - (char*) reg,*nbytes);
}

void BSPGET_COMMON(int *pid, void *reg, void *src, void *dst, int *nbytes){
  bsp_get(*pid,reg,(char*)src - (char*) reg,dst,*nbytes);
}


void BSPHPGET_COMMON(int *pid, void *reg, void *src, void *dst, int *nbytes){
  bsp_hpget(*pid,reg,(char*)src - (char*) reg,dst,*nbytes);
}


#ifdef CRAYMPP
void CPPSYNC_NUMBER(int *number, int *lineno, _fcd fname) {
#else
void CPPSYNC_NUMBER(int *number, int *lineno, char *fname,int len) {
#endif
  char *filename=NULL;
  extern int _bsp_do_prof;
  extern int _bsp_do_cgprof;
#ifdef SANITY_CHECK
  int i, same=1;
  char buff[100], *errstring;

  bsp_hpput(0,number,f77_sstep_numbers,bsp_pid()*sizeof(int),sizeof(int));
#endif

  if (_bsp_do_prof || _bsp_do_cgprof) {
#ifdef CRAYMPP
    filename = bsp_craystr_cstr(fname);
#else
    filename = bsp_f77str_cstr(fname,len);
#endif
    bsp_sync_cpp(*lineno,filename);
  } else {
    bsp_sync_cpp(0,NULL);
  }

#ifdef SANITY_CHECK
  if (bsp_pid()==0) {
    for(i=0;i<bsp_nprocs();i++) 
      same = same && (f77_sstep_numbers[i]==*number);

    if (!same) {
      errstring = malloc (bsp_nprocs()*100);
      if (errstring==NULL)
        bsp_abort("{bsp_sync_number} line %d of \"%s\"\n"
                  "\tInconsistent superstep numbers",
                  *lineno,filename);

      for(i=0;i<bsp_nprocs();i++) {
        sprintf(buff,"\tProcess %4d has superstep number %6d\n",
                i,f77_sstep_numbers[i]);
        strcat(errstring,buff);
      }   
      bsp_abort("{bsp_sync_number} line %d of \"%s\"\n"
                "\tInconsistent superstep numbers:\n%s",
                *lineno,filename,errstring);
    }
  }
#endif 
  if (_bsp_do_prof || _bsp_do_cgprof) free(filename);
}


void BSPSYNC_NUMBER(int *number) {
  int lineno=0;
#ifdef CRAYMPP
  CPPSYNC_NUMBER(number,&lineno,_cptofcd("unprofiled",10));
#else
  CPPSYNC_NUMBER(number,&lineno,"unprofiled",10);
#endif
}

\end{code}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995,1996,1997 University of Oxford                %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id$
% $Log$
\begin{code}
#include "bsp.h"
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

void main(int argc, char *argv[]) {
  int i,tagsize,size,bytes, *tag,pid,status;
  char **new_argv, *payload, *dir;

  bsp_begin(2);
  if (bsp_nprocs()!=2) 
    bsp_abort("{bsp_nowstartup} unable to allocate two processes\n");

  tagsize=sizeof(int);
  bsp_set_tagsize(&tagsize);
  bsp_push_reg(&status,sizeof(int));
  bsp_sync();
  
  if (bsp_pid()==0)
    for(i=1;i<argc;i++) 
      bsp_send(1,&i,argv[i],1+strlen(argv[i]));
  bsp_sync();

  if (bsp_pid()==1) {
    bsp_qsize(&size,&bytes);
    new_argv=calloc(1+size,sizeof(char*));
    if (new_argv==NULL)
      bsp_abort("{bsp_nowstartup} unable to allocate %d elements\n",size);
    while(bsp_hpmove((void**)&tag,(void**)&payload)!=-1) 
      new_argv[(*tag)-1]=payload;

    new_argv[size]=NULL;
    if (pid=fork()) {
      if (pid<0) bsp_abort("{bsp_nowstartup} fork failed");
      wait(&status);
      status=(WIFEXITED(status))?(WEXITSTATUS(status)):1;
      bsp_put(0,&status,&status,0,sizeof(int));
    } else {
      /* Child process */
      putenv("BSPTCP_PID=-1");
      dir=malloc(strlen(getenv("HOME"))+strlen(new_argv[0])+1);
      if (dir==NULL)
	bsp_abort("{bsp_nowstartup} unable to allocate storage");
      strcpy(dir,getenv("HOME"));
      strcat(dir,"/");
      strcat(dir,new_argv[0]);
      chdir(dir);
      execvp(new_argv[1],&new_argv[1]);
      bsp_abort("{bsp_nowstartup}\n"
                "\tFailed to execute the binary \"%s\" in\n"
                "\tthe directory \"%s\".\n",new_argv[1],dir);      
    }
  }
  bsp_sync();
  bsp_end();
  exit(status);  
}
\end{code}

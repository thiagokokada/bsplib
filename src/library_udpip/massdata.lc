% $Id: massdata.lc,v 1.1 1997/07/11 10:28:54 jonh Exp $
% $Log: massdata.lc,v $
% Revision 1.1  1997/07/11 10:28:54  jonh
% Initial revision
%


\begin{code}
#include <stdlib.h>
#include <stdio.h>

#include "bspudpl.h"

#define BSP_NPROCS 2
#define BLOCK_SIZE 4

void main(int argc, char *argv[])
   {
   int i;
   int mypid;
   int frompid;
   char *env;
   int buflen;
   int buftype;
   int nprocs;
   int recbytes = 0;
   int sndbytes = 0;
   int nbytes;
   int sentsomethig;
   int sentsomething;
   char outbuf[BLOCK_SIZE];
   char inbuf[BLOCK_SIZE];
   int datalimit = 10000000;

   int bufsize = 20000;
   int nbuffs = 5000;

   for (i = 0; i < BLOCK_SIZE; i++) 
      outbuf[i] = i % 128;

   bspudp_set_buffer_size(&bufsize,&nbuffs,0);
   /* bspudp_env(BSP_NPROCS,"@PWD@/massdata"); */
   bspudp_env(BSP_NPROCS,"/home/sd/BSP/src/library_udpip/massdata");

   bspudp_init(&nprocs);

   if (nprocs < 2)
      {
      fprintf(stderr,"Expected procs not initialised (%d is too few).\n",
              nprocs);
      bspudp_messg_exit(-1);
      }

   printf("The sample program has started.\n"); fflush(stdout);

   env = getenv("BSPTCP_PID");
   if (env)
      sscanf(env,"%d",&mypid);
   else
      mypid = 0;

   if (mypid == 0 && argc == 2)
      if (sscanf(argv[1],"%d",&datalimit) != 1)
         {
         printf("Invalid command line option.\n"); fflush(stdout);
         if (mypid) bspudp_messg_exit(-1);
         exit(-1);   
         }

   i = 0;
   bspudp_wait_sends();
   while(1) 
      {  
      if (sndbytes < datalimit) 
         do {
            sentsomething = 0;
            for (; !sentsomething; i = (i+1)%nprocs)
               if (i != mypid && bspudp_okto_send(i))
                  sentsomething=bspudp_nonblock_send(outbuf,BLOCK_SIZE,i,0,1); 
            if (sentsomething) sndbytes += BLOCK_SIZE;
            }
         while(!sentsomething);
   
         while((frompid = -1, buftype = 0, bspudp_probe(&frompid,&buftype,0,0)))
            {
            bspudp_block_recv(inbuf,BLOCK_SIZE,&frompid,&buftype,&nbytes);
            if (recbytes / 10000 != (recbytes + nbytes) / 10000) {
              printf("Number of bytes received = %d.\n",recbytes);
              fflush(stdout);
              }
            recbytes += nbytes;
            } 
         if (sndbytes >= datalimit && recbytes >= datalimit)
            if (mypid == 0) 
               exit(0);
            else
               bspudp_messg_exit(0);
               

      } /* while(1) */   
   }
\end{code}

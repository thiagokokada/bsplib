head	1.1;
access;
symbols;
locks
	jonh:1.1; strict;
comment	@# @;


1.1
date	97.07.11.10.28.33;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@% $Id$
% $Log$

\begin{code}
  /* 
   * This program, bsptcpm.c, is the master BSP/TCP program started by the 
   * BSP/TCP BSP pid 0 program when a user processor  
   * (as a result of a BSPLib program executing bsp_begin). This program
   * reads a list of host names and attempt to contact the BSP/TCP daemon 
   * on those hosts. The number of hosts attempted is taken frm the environment
   * variable BSPTCP_NPROCS. This is setup by the BSP PID 0 program when it
   * reaches the BSP_BEGIN statement (there is a limit to the number of 
   * connect attempts that will be attempted - BSPTCP_MAX_ATTEMPTS). The local 
   * userid and password of the logged in user are sent to the remote machines
   * to make sure that the have login on those machines. The program name and 
   * path, and the BSP pid of the process on that machinen are also sent to 
   * the slave which should now be running on that machine. 
   *
   * Once the slaves have been initiated, and each have started the SPMD 
   * program, the master and slaves are responsible for sending control 
   * information and signals to each other via the master/slave control 
   * sockets.
   */

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>
#include <pwd.h>

#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/socket.h>
#ifdef BSPTCP_OSAIX
#include <sys/select.h>
#endif 
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netdb.h>

#include "bsptcpdefs.h"

  /*
   * Global variables:
   */

volatile int spmd_pid;           /* pid of BSP proc 0 process */
int *csock = NULL;               /* fds of control sockets to slaves */
int bsp_nprocs;                  /* number of BSP processors */
volatile int procs_left;         /* remaining BSP processors */
volatile int setup_complete=0;   /* successful setup of BSP processes */
int cxpipe[2];                   /* child exit/signal notify pipe */
char **machines;                 /* names of participating machines */
int splitoutput;                 /* pid banners for terminal IO */

  /* 
   * Define macros expanded in the guard functions. These functions 
   * guard calls to system functions and abort execution if anything 
   * unexpected happens. The macros are used to customise the functions
   * for the particular BSP/TCP component.
   */

#define BSPTCP_COMPONENT "BSP/TCP Master"    /* component identifier */
#define ABORT_MSG_OK csock         /* to check if ABORT_MSG & ABORT_EXIT OK */
#define ABORT_EXIT(exitcode)       /* abort BSP execution */ \
        { \
        int i; \
        bsptcp_msghdr_t msghdr; \
        \
        for (i = 1; i < bsp_nprocs; i++) \
           { \
           msghdr.msgtype = BSPTCP_MSG_ABORT; \
           msghdr.msglen = 0; \
           msghdr.msgspid = 0; \
           msghdr.msgdpid = i; \
           if (csock[i]) \
              { \
              send(csock[i],(char *)&msghdr,sizeof(msghdr),0); \
              close(csock[i]); csock[i] = 0; \
              } \
           } \
        kill(spmd_pid,9); \
        wait(NULL); \
        fprintf(stderr,"BSP/TCP Master: computation aborted.\n"); \
        exit(exitcode); \
        } 
#define ABORT_MSG(text) fprintf(stderr,text) 

#define IGN_INT(fn) \
   { \
   while ((check_rc = fn) < 0 && errno == EINTR); \
   }

#define GUARDNN_IGN_INT(fn,msg) \
   { \
   while ((check_rc = fn) < 0 && errno == EINTR); \
   GUARDNN(check_rc,msg); \
   } 

#define GUARDEQ_IGN_INT(fn,val,msg) \
   { \
   while ((check_rc = fn) < 0 && errno == EINTR); \
   GUARDEQ(check_rc,val,msg); \
   }

#define MSG_HEADER(str,src) \
   { \
   char str_name[10]; \
   \
   if (splitoutput) {\
     if (str == stdout) strcpy(str_name,"stdout"); \
     else \
        if (str == stderr) strcpy(str_name,"stderr"); \
        else strcpy(str_name,"<other>"); \
     if (last_src != src || last_str != str) \
        fprintf(str,"\n --- %s BSP pid %d - %s ---\n", \
        machines[src],src,str_name); \
     fflush(str); \
     last_str = str; \
     last_src = src; \
     }\
   }

#include "bsptcperrs.h"          /* guard functions */

  /*
   * Additional prototypes:
   */

void spmdreap(int sig);

void main(void)
   {
   int i, j, check_rc, rc;

   int attempts;                    /* connection attempts to a host */
   int bsp_dport;                   /* port BSP daemons listen on */
   unsigned short bsp_uport;        /* port if user process daemon in use */
   struct sockaddr_in csockaddr;    /* for addressing BSP daemons */
   struct linger linger;            /* sockets linger on close if data */
   int optval;                      /* value of socket option */

   fd_set readfd;                   /* fds to watch for reading */
   fd_set exceptfd;                 /* fds to watch for exceptions */
   int maxfd;                       /* max fd number for select */
   int fd_count;                    /* fds count from select */
   int ucpipe[2];                   /* control pipe between master and SPMD */
   int dcpipe[2];                   /* control pipe between master and SPMD */
   struct timeval timeout;          /* select timeout value */
   int cleanup;                     /* indicate clean up to be performed */

   bsptcp_msghdr_t msghdr;          /* message header struct */
   char msgbuf[200];                /* message buffer */

   char spmd_prog[80];              /* SPMD program and path */
   int spmd_stdout;                 /* pipe end for reading pid 0 stdout */
   int spmd_stderr;                 /* pipe end for reading pid 0 stderr */

   char bsp_hostnames[80];          /* BSP hostnames file name */
   FILE *hostnames;                 /* BSP hostnames file */
   char hostname[80];               /* a single hostname */

   struct hostent *host;            /* netdb format host info */
   struct passwd *passwdent;        /* current user's password entry */ 

   struct sigaction sigchild;       /* action for SIGCHLD signal */
 
   int last_src = -1;               /* last BSP pid to write */
   FILE *last_str = NULL;           /* last stream used (stdout/stderr) */

#ifdef DEBUG
   printf("BSP/TCP Master: process has started.\n"); fflush(stdout);
#endif
  /*
   * setup reaper for child (BSP pid 0) process termination:
   */

   memset(&sigchild,0,sizeof(sigchild));
   sigchild.sa_handler = spmdreap;
#ifdef SA_RESTART
   sigchild.sa_flags = SA_NOCLDSTOP+SA_RESTART;
#else
   sigchild.sa_flags = SA_NOCLDSTOP;
#endif

   GUARDZ(pipe(cxpipe),"pipe(cxpipe)");
   GUARDZ(sigaction(SIGCHLD,&sigchild,NULL),"sigaction(SIGCHLD)");

  /* 
   * Get parameters from environment: Controlling pipe fds, SPMD program
   * stdout and stderr read pipe end fds, SPMD program name, 
   * number of BSP processors, ``well known'' port of BSP daemon,
   * hostname file name, and the pid of the BSP process 0 PID.
   */

   dcpipe[0] = 2; ucpipe[1] = 2; /* shouldn't use these pipe ends */
   GUARDEQ(sscanf(GUARDNZP(getenv("BSPTCP_CPIPE_READ"),"getenv(CPIPE_READ)"),
           "%d",&ucpipe[0]),1,"sscanf(ucpipe[0])");
   GUARDEQ(sscanf(GUARDNZP(getenv("BSPTCP_CPIPE_WRITE"),"getenv(CPIPE_WRITE)"),
           "%d",&dcpipe[1]),1,"sscanf(dcpipe[1])");
   GUARDEQ(sscanf(GUARDNZP(getenv("BSPTCP_SPMD_STDOUT"),"getenv(SPMD_STDOUT)"),
           "%d",&spmd_stdout),1,"sscanf(spmd_stdout)");
   GUARDEQ(sscanf(GUARDNZP(getenv("BSPTCP_SPMD_STDERR"),"getenv(SPMD_STDERR)"),
           "%d",&spmd_stderr),1,"sscanf(spmd_stderr)");
   strcpy(spmd_prog,GUARDNZP(getenv("BSPTCP_SPMD_PROGRAM"),
           "getenv(SPMD_PROGRAM)"));
   GUARDEQ(sscanf(GUARDNZP(getenv("BSPTCP_NPROCS"),"getenv(NPROCS)"),
           "%d",&bsp_nprocs),1,"sscanf(NPROCS)");
   GUARDEQ(sscanf(GUARDNZP(getenv("BSPTCP_PORTNUMBER"),"getenv(PORTNUMBER)"),
           "%d",&bsp_dport),1,"sscanf(dport)");
   strcpy(bsp_hostnames,GUARDNZP(getenv("BSPTCP_HOSTNAMES"),
           "getenv(HOSTMAMES)"));
   GUARDEQ(sscanf(GUARDNZP(getenv("BSPTCP_BSPPID0PID"),"getenv(BSPPID0PID)"),
           "%d",&spmd_pid),1,"sscanf(spmd_pid)");

   GUARDEQ(sscanf(GUARDNZP(getenv("BSP_SPLITOUTPUT"),"getenv(SPLITOUTPUT)"),
           "%d",&splitoutput),1,"sscanf(splitoutput)");

   /* set the stdout and stderr fds to non-blocking */
   GUARDNN(fcntl(spmd_stdout,F_SETFL,O_NONBLOCK),"fcntl(spmd_stdout)");
   GUARDNN(fcntl(spmd_stderr,F_SETFL,O_NONBLOCK),"fcntl(spmd_stderr)");
   
  /*
   * Get current effective user's password file entry structure address.
   */

   passwdent = getpwuid(geteuid());
   GUARDZ(passwdent == NULL,"getpwuid()");

  /*
   * Attempt to establish a slave process for each of the BSP processors
   * requested. This is done by reading the hostname file and attempting to 
   * contact the required number of processes. The number of processors 
   * that managed to be contacted is communicated to the BSP pid 0.
   */

   /* open the file containing the list of host names */
   hostnames = fopen(bsp_hostnames,"r");
   if (!hostnames)
      {
      fprintf(stderr,"BSP/TCP Master: error opening host names file %s.\n",
              bsp_hostnames);
      exit(1);
      }

   /* allocate allocate socket fd array for number of procs requested */
   GUARDNZP(csock = malloc(sizeof(int)*bsp_nprocs),"malloc(csock)");
   for (i = 0; i < bsp_nprocs; i++)
      csock[i] = 0;

   /* allocate machine name array - for participating machines */
   machines = (char **)malloc(sizeof(char *)*bsp_nprocs);
   GUARDNZP((char *)machines,"malloc(machines)");
   gethostname(hostname,80);
   machines[0] = GUARDNZP(malloc(strlen(hostname)+1),"malloc(hostname)");
   strcpy(machines[0],hostname);

   /* attempt to contact the required number of processes */
   j = 1;
   for (i = 0; i < BSPTCP_MAX_ATTEMPTS && j < bsp_nprocs; i++)
      if (fgets(hostname,sizeof(hostname),hostnames))
         {
         char *delim;
         if (delim = strchr(hostname,'\n')) *delim = 0;
         host = gethostbyname(hostname);
         attempts = 2; /* Once for each type of processor daemon */
         while (attempts)
            {
            attempts--;
            if (host)
               {
               /* create an internet socket */
               csock[j] = GUARDNN(socket(AF_INET,SOCK_STREAM,0),"socket()");
               /* socket must linger on close in presence of data */
               linger.l_onoff = 1;
               linger.l_linger = BSPTCP_LINGER_INT;
               GUARDZ(setsockopt(csock[j],SOL_SOCKET,SO_LINGER,
                  (char *)&linger,sizeof(linger)),"setsockopt(SO_LINGER)");
               optval = 1;
               GUARDZ(setsockopt(csock[j],IPPROTO_TCP,TCP_NODELAY,
                   (char *)&optval,sizeof(optval)),"setsockopt(TCP_NODELAY)");
               /* setup addressing structure of host and attempt connect */ 
               memset(&csockaddr,0,sizeof(struct sockaddr));
               csockaddr.sin_family = AF_INET;
               if (attempts)
                  csockaddr.sin_port = htons(bsp_dport);
               else
                  csockaddr.sin_port = htons(bsp_uport);
               memcpy(&csockaddr.sin_addr.s_addr,host->h_addr_list[0],
                      sizeof(csockaddr.sin_addr.s_addr));
               if (!connect(csock[j],(struct sockaddr *)&csockaddr,
                            sizeof(struct sockaddr)))
                  {
                  msghdr.msgtype = BSPTCP_MSG_ACK;
                  msghdr.msgspid = 0;
                  msghdr.msgdpid = j;
                  /* send ack indicating new session request */
                  GUARDNN_IGN_INT((send(csock[j],(char *)&msghdr,
                     sizeof(msghdr),0)),"send()");
                  msghdr.msgtype = BSPTCP_MSG_CDATA;
                  /* send the userid to the remote daemon */
                  msghdr.msglen = strlen(passwdent->pw_name);
                  GUARDNN_IGN_INT((send(csock[j],(char *)&msghdr,
                     sizeof(msghdr),0)),"send()");
                  GUARDNN_IGN_INT((send(csock[j],passwdent->pw_name,
                     msghdr.msglen,0)),"send()");
   
                  /* send the password to the remote daemon */
                  msghdr.msglen = strlen(passwdent->pw_passwd);
                  GUARDNN_IGN_INT((send(csock[j],(char *)&msghdr,
                     sizeof(msghdr),0)),"send()");
                  GUARDNN_IGN_INT((send(csock[j],passwdent->pw_passwd,
                     msghdr.msglen,0)),"send()");
   
                  /* either an error message is returned, acknowledgement or 
                     or a control data reply indicating that the host is 
                     a port daemon (and not a processor daemon) */
                  GUARDEQ_IGN_INT((recv(csock[j],(char *)&msghdr,sizeof(msghdr),
                     MSG_WAITALL)),sizeof(msghdr),"1-recv()"); 
   
                  /* Error returned: Includes message text */
                  if (msghdr.msgtype == BSPTCP_MSG_STDERR)
                     {
                     GUARDEQ_IGN_INT((recv(csock[j],msgbuf,msghdr.msglen,
                        MSG_WAITALL)),msghdr.msglen,"recv()"); 
                     msgbuf[msghdr.msglen] = 0;
                     MSG_HEADER(stderr,msghdr.msgspid);
                     fprintf(stderr,"%s\n",msgbuf);
                     attempts = 0;
                     }
   
                  /* Daemon has accepted connection */
                  if (msghdr.msgtype == BSPTCP_MSG_ACK) 
                     {
                     /* the slave is running on the host 
                       - BSP pid and SPMD program name can be sent */
                     machines[j] = GUARDNZP(malloc(strlen(hostname)+1),
                        "malloc(hostname)");
                     strcpy(machines[j],hostname);
                     j++;
                     attempts = 0;
                     }
                  
                  /* Daemon has accepted connection but this daemon is 
                     only a port daemon and the connection must be re-attempted
                     against the user processor daemon */
                  if (msghdr.msgtype == BSPTCP_MSG_CDATA)
                     {
                     GUARDEQ_IGN_INT((recv(csock[j],(char*) &bsp_uport,
                        sizeof(bsp_uport),
                        MSG_WAITALL)),sizeof(bsp_uport),"recv()"); 
                     close(csock[j]);
                     }

                  }
               else /* connect() call failed */
                  {
                  sprintf(msgbuf,
                     "BSP/TCP Master: error trying to connect to %s:%d",
                       hostname,attempts?bsp_dport:bsp_uport);
                  perror(msgbuf);
                  attempts = 0;
                  }
               }
            else 
               {
               /* gethostbyname() call failed */
               fprintf(stderr,"BSP/TCP Master: hostname lookup failed for %s.\n",
                       hostname);
               attempts = 0;
               }
            }
         }
      else
         i = BSPTCP_MAX_ATTEMPTS;

   /*      
    * The actual number of processes to be used must be communicated back  
    * to the BSP pid 0 process.
    */

   bsp_nprocs = j;
   msghdr.msgtype = BSPTCP_MSG_CDATA;
   msghdr.msglen = sizeof(bsp_nprocs);
   msghdr.msgspid = 0;
   msghdr.msgdpid = 0;
   GUARDNN_IGN_INT((write(dcpipe[1],&msghdr,sizeof(msghdr))),"write()");
   GUARDNN_IGN_INT((write(dcpipe[1],&bsp_nprocs,sizeof(bsp_nprocs))),
      "write()");
   procs_left = bsp_nprocs;

  /*
   * The non-zero BSP pid processes are forked by the slaves and when they 
   * reach the BSP_BEGIN point, all the processes communicate control 
   * information using the slave and master processes. The control 
   * information that is exchanged is used to setup sockets between all
   * the copies of the SPMD programs in the BSP computation. These sockets
   * are used to exchange data between the BSP processes only. Control
   * information (e.g. signals) are still sent via the slave and master 
   * processes and their respective control pipes.
   */

   /* send the SPMD program name, BSP pid values and nprocs to the slaves */
   for (i = 1; i < bsp_nprocs; i++)
      {
      msghdr.msgtype = BSPTCP_MSG_CDATA;
      msghdr.msgspid = 0;
      msghdr.msgdpid = i;
      msghdr.msglen = strlen(spmd_prog);
      GUARDNN_IGN_INT((send(csock[i],(char *)&msghdr,sizeof(msghdr),0)),
         "send()");
      GUARDNN_IGN_INT((send(csock[i],spmd_prog,msghdr.msglen,0)),"send()");
      msghdr.msglen = sizeof(int);
      GUARDNN_IGN_INT((send(csock[i],(char *)&msghdr,sizeof(msghdr),0)),
         "send()");
      GUARDNN_IGN_INT((send(csock[i],(char *)&i,msghdr.msglen,0)),
         "send()");
      GUARDNN_IGN_INT((send(csock[i],(char *)&msghdr,sizeof(msghdr),0)),
         "send()");
      GUARDNN_IGN_INT((send(csock[i],(char *)&bsp_nprocs,msghdr.msglen,0)),
         "send()");
      }
 
   maxfd = ucpipe[0];
   for (i = 1; i < bsp_nprocs; i++) 
      if (csock[i] > maxfd) maxfd = csock[i];
   if (cxpipe[0] > maxfd) maxfd = cxpipe[0];
   if (spmd_stdout > maxfd) maxfd = spmd_stdout;
   if (spmd_stderr > maxfd) maxfd = spmd_stderr;
   
   while(procs_left)
      {
      setup_complete = 1;  /* pid 0 termination from now on is OK*/

      FD_ZERO(&readfd);
      FD_ZERO(&exceptfd);
      if (ucpipe[0]) 
         {
         FD_SET(ucpipe[0],&readfd);
         FD_SET(ucpipe[0],&exceptfd);
         }
      if (cxpipe[0]) 
         {
         FD_SET(cxpipe[0],&readfd);
         FD_SET(cxpipe[0],&exceptfd);
         }
      if (spmd_stdout) 
         {
         FD_SET(spmd_stdout,&readfd);
         FD_SET(spmd_stdout,&exceptfd);
         }
      if (spmd_stderr) 
         {
         FD_SET(spmd_stderr,&readfd);
         FD_SET(spmd_stderr,&exceptfd);
         }
      for (i = 1; i < bsp_nprocs; i++) 
         if (csock[i]) 
            {
            FD_SET(csock[i],&readfd);
            FD_SET(csock[i],&exceptfd);
            }
     
      timeout.tv_sec = BSPTCP_TIMEOUT_HIGH; 
      timeout.tv_usec = 0;
      cleanup = 0;

      fd_count =select(maxfd+1,&readfd,NULL,&exceptfd,&timeout);
      if (fd_count < 0 && errno == EINTR) continue;
      GUARDNN(fd_count,"select()");

      if (!fd_count) cleanup = 1; /* no activity for a while - cleanup */

      if (fd_count && FD_ISSET(ucpipe[0],&exceptfd))
         {
         MSG_HEADER(stderr,0);
         fprintf(stderr,"BSP/TCP Master: Control pipe exception.\n");

         close(ucpipe[0]); ucpipe[0] = 0;
         close(dcpipe[1]); dcpipe[1] = 0;
         fd_count--;
         }

      if (fd_count && FD_ISSET(cxpipe[0],&exceptfd))
         {
         MSG_HEADER(stderr,0);
         fprintf(stderr,"BSP/TCP Master: Child exit pipe exception.\n");

         cleanup = 1;
         fd_count--;
         }
         
      for (i = 1; i < bsp_nprocs && fd_count; i++)
         if (FD_ISSET(csock[i],&exceptfd))
            {
            MSG_HEADER(stderr,0);
            fprintf(stderr,"BSP/TCP Master: Control socket exception.\n");

            cleanup = 1;
            fd_count--;
            }

      if (fd_count && ucpipe[0] && FD_ISSET(ucpipe[0],&readfd))
         {
         GUARDNN_IGN_INT((rc = read(ucpipe[0],&msghdr,sizeof(msghdr))), 
            "read(ucpipe[0])");
         if (rc == 0)
            {
            close(ucpipe[0]); ucpipe[0] = 0;
            close(dcpipe[1]); dcpipe[1] = 0;
#ifdef DEBUG
            fprintf(stderr,"BSP/TCP Master: control pipe end-of-file.\n");
#endif
            fd_count--;
            continue;
            }
         
         switch (msghdr.msgtype)
            {
            case BSPTCP_MSG_ABORT:
               GUARDNN_IGN_INT((read(ucpipe[0],&rc,msghdr.msglen)),
                  "1-read(ucpipe)");
               msghdr.msglen = 0;
               for (i = 1; i < bsp_nprocs; i++)
                  {
                  msghdr.msgspid = 0;
                  msghdr.msgdpid = i;
                  IGN_INT(send(csock[i],(char *)&msghdr,sizeof(msghdr),0));
                  close(csock[i]); csock[i] = 0;
                  }
               IGN_INT(write(dcpipe[1],&msghdr,sizeof(msghdr))); /* ack */
               wait(NULL);
               close(ucpipe[0]); ucpipe[0] = 0;
               close(dcpipe[1]); dcpipe[1] = 0;
               MSG_HEADER(stderr,0);
               fprintf(stderr,
                  "BSP/TCP Master: computation aborted (code = %d).\n", rc);
               exit(rc);
            
            case BSPTCP_MSG_SIGNAL:
               {
               int sig = 9;
   
               if (msghdr.msglen == sizeof(sig))
                  GUARDNN_IGN_INT((read(ucpipe[0],&sig,sizeof(sig))),
                        "4-read(ucpipe)")
               else
                  {
                  MSG_HEADER(stderr,0);
                  fprintf(stderr,
                   "BSP/TCP Master: Message format error - assume sig = 9.\n");
                  }
               for (i = 1; i < bsp_nprocs; i++)
                  {
                  msghdr.msgspid = 0;
                  msghdr.msgdpid = i;
                  IGN_INT(send(csock[i],(char *)&msghdr,sizeof(msghdr),0));
                  IGN_INT(send(csock[i],(char *)&sig,sizeof(sig),0));
                  close(csock[i]); csock[i] = 0;
                  }
               MSG_HEADER(stderr,0);
               fprintf(stderr,
                  "BSP/TCP Master: Signal %d received from BSP pid 0.\n",sig);
               IGN_INT(write(dcpipe[1],&msghdr,sizeof(msghdr))); /* ack */
               wait(NULL);
               close(ucpipe[0]); ucpipe[0] = 0;
               close(dcpipe[1]); dcpipe[1] = 0;
               close(cxpipe[0]); cxpipe[0] = 0;
               close(cxpipe[1]); cxpipe[1] = 0;
               cleanup = 1;
               } 
              break;
            
            case BSPTCP_MSG_CDATA:
               GUARDNN_IGN_INT((send(csock[msghdr.msgdpid],(char *)&msghdr,
                  sizeof(msghdr),0)),"send(csock)");
               if (msghdr.msglen)
                  {
                  GUARDNN_IGN_INT((read(ucpipe[0],msgbuf,msghdr.msglen)),
                     "2-read(ucpipe)");
                  GUARDNN_IGN_INT((send(csock[msghdr.msgdpid],msgbuf,
                     msghdr.msglen,0)),
                     "send(csock)");
                  }
               break;

            case BSPTCP_MSG_EXIT:
               GUARDNN_IGN_INT((read(ucpipe[0],&rc,sizeof(rc))),
                  "3-read(ucpipe)");
               GUARDNN_IGN_INT((write(dcpipe[1],&msghdr,sizeof(msghdr))),
                  "write(dcpipe[1])");
               wait(NULL);
               close(ucpipe[0]); ucpipe[0] = 0;
               close(dcpipe[1]); dcpipe[1] = 0;
               procs_left--;
               MSG_HEADER(stderr,0);
#ifdef DEBUG
               fprintf(stderr,
                  "BSP/TCP Master: BSP pid 0 ended (status = %d).\n",
                  rc);
#endif
               break;
            }

         fd_count--;
         }

      if (fd_count && cxpipe[0] && FD_ISSET(cxpipe[0],&readfd))
         {
         GUARDNN_IGN_INT((read(cxpipe[0],&msghdr,sizeof(msghdr))),
            "read(cxpipe[0])");

         switch (msghdr.msgtype)
            {
            case BSPTCP_MSG_SIGNAL:
               {
               int sig;

               GUARDNN_IGN_INT((read(cxpipe[0],&sig,sizeof(sig))),
                  "read(cxpipe sig)");
               for (i = 1; i < bsp_nprocs; i++)
                  {
                  msghdr.msgspid = 0;
                  msghdr.msgdpid = i;
                  IGN_INT(send(csock[i],(char *)&msghdr,sizeof(msghdr),0));
                  IGN_INT(send(csock[i],(char *)&sig,sizeof(sig),0));
                  close(csock[i]); csock[i] = 0;
                  }
               MSG_HEADER(stderr,0);
               fprintf(stderr,
                  "BSP/TCP Master: BSP pid 0 received sig %d.\n",sig);
               fprintf(stderr,"BSP/TCP Master: Sig %d sent to all pids.\n",sig);
               exit(1);
               }
               break;

            case BSPTCP_MSG_EXIT:
               {
               int status;

               GUARDNN_IGN_INT((read(cxpipe[0],&status,sizeof(status))),
                  "read(cxpipe status)");
               close(ucpipe[0]); ucpipe[0] = 0;
               close(dcpipe[1]); dcpipe[1] = 0;
               close(cxpipe[0]); cxpipe[0] = 0;
               close(cxpipe[1]); cxpipe[1] = 0;
               procs_left--;
               MSG_HEADER(stderr,0);
#ifdef DEBUG
               fprintf(stderr,
                  "BSP/TCP Master: BSP pid 0 ended (status = %d).\n",
                  status);
#endif
               }
               break;
             }
         fd_count--;
         }

      /* if exceptions on stderr/stdout the then just close them */
      if (fd_count && FD_ISSET(spmd_stdout,&exceptfd))
         {
         close(spmd_stdout); spmd_stdout = 0;
         fd_count--;
         }
      if (fd_count && FD_ISSET(spmd_stderr,&exceptfd))
         {
         close(spmd_stderr); spmd_stderr = 0;
         fd_count--;
         }

      if (fd_count && spmd_stdout && FD_ISSET(spmd_stdout,&readfd))
         {
         /* SPMD program has stdout data */
         while((msghdr.msglen = read(spmd_stdout,msgbuf,
               sizeof(msgbuf))) > 0)
            { 
            MSG_HEADER(stdout,0);
            write(1,msgbuf,msghdr.msglen);
            }
         fd_count--;
         }

      if (fd_count && spmd_stderr && FD_ISSET(spmd_stderr,&readfd))
         {
         /* SPMD program has stderr data */
         while((msghdr.msglen = read(spmd_stderr,msgbuf,
               sizeof(msgbuf))) > 0)
            { 
            MSG_HEADER(stderr,0);
            write(2,msgbuf,msghdr.msglen);
            }
         fd_count--;
         }

      for (i = 1; i < bsp_nprocs && fd_count; i++)
         if (csock[i] && FD_ISSET(csock[i],&readfd))
            {
            GUARDNN_IGN_INT((rc = recv(csock[i],(char *)&msghdr,sizeof(msghdr),
               MSG_WAITALL)),"2-recv(csock)");
            GUARDNZ(rc >= BSPTCP_MIN_TYPE && rc <= BSPTCP_MAX_TYPE,
               "recv(csock) type out of range");
            switch (msghdr.msgtype)
               {
               case BSPTCP_MSG_ABORT:
                  GUARDEQ_IGN_INT(recv(csock[i],(char *)&rc,sizeof(int),
                     MSG_WAITALL),sizeof(int),"3-recv(csock)");
                  for (j = 1; j < bsp_nprocs; j++)
                     {
                     msghdr.msgspid = 0;
                     msghdr.msgdpid = j;
                     if (csock[j]) 
                        {
                        IGN_INT(send(csock[j],(char *)&msghdr,
                           sizeof(msghdr),0));
                        close(csock[j]); csock[j] = 0;
                        }
                     }
                  kill(spmd_pid,9); 
                  wait(NULL);
                  MSG_HEADER(stderr,0);
                  fprintf(stderr,
                     "BSP/TCP Master: Abort received from BSP pid %d",j);
                  fprintf(stderr," (code = %d).\n",rc);
                  exit(1);

               case BSPTCP_MSG_SIGNAL:
                  {
                  int sig = 9;

                  if (msghdr.msglen == sizeof(sig))
                     GUARDNN_IGN_INT((recv(csock[i],(char *)&sig,sizeof(sig),
                        MSG_WAITALL)),"4-recv(csock)")
                  else
                     {
                     MSG_HEADER(stderr,0);
                     fprintf(stderr,
                    "BSP/TCP Master: Message format error - assume sig = 9.\n");
                     }
                  MSG_HEADER(stderr,0);
                  fprintf(stderr,"BSP/TCP Master: BSP pid %d requested sig ",
                     msghdr.msgspid);
                  fprintf(stderr,"%d to be sent to all BSP pids.\n",sig);
                  for (j = 1; j < bsp_nprocs; j++)
                     if (j != i) 
                        {
                        msghdr.msgspid = 0;
                        msghdr.msgdpid = j;
                        if (csock[j])
                           {
                           GUARDNN_IGN_INT((send(csock[j],(char *)&msghdr,
                              sizeof(msghdr),0)),"send(csock)");
                           GUARDNN_IGN_INT((send(csock[j],(char *)&sig,
                              sizeof(sig),0)),"send(csock)");
                           close(csock[j]); csock[j] = 0;
                           }
                        }
                  close(csock[i]); csock[i] = 0;
                  close(ucpipe[0]); ucpipe[0] = 0;
                  close(dcpipe[1]); dcpipe[1] = 0;
                  kill(spmd_pid,sig); 
                  } 
                  break;

               case BSPTCP_MSG_CDATA:
                  if (msghdr.msgdpid)
                     GUARDNN_IGN_INT((send(csock[msghdr.msgdpid],
                        (char *)&msghdr,sizeof(msghdr),0)),"send(csock)")
                  else
                     GUARDNN_IGN_INT((write(dcpipe[1],&msghdr,sizeof(msghdr))),
                            "write(dcpipe[1]");
                  if (msghdr.msglen)
                     {
                     GUARDNN_IGN_INT((recv(csock[i],msgbuf,msghdr.msglen,
                        MSG_WAITALL)),"5-recv(csock)");
                     if (msghdr.msgdpid)
                        GUARDNN_IGN_INT((send(csock[msghdr.msgdpid],msgbuf,
                           msghdr.msglen,0)),"send(csock)")
                     else
                        GUARDNN_IGN_INT((write(dcpipe[1],msgbuf,msghdr.msglen)),
                               "write(dcpipe[1])");
                     }
                  break;
           
               case BSPTCP_MSG_STDOUT:   
                  if (msghdr.msglen)
                     {
                     GUARDNN_IGN_INT((recv(csock[i],msgbuf,msghdr.msglen,
                        MSG_WAITALL)),"6-recv(csock)");
                     MSG_HEADER(stdout,i); 
                     write(1,msgbuf,msghdr.msglen);
                     }
                  break;
            
               case BSPTCP_MSG_STDERR:   
                  if (msghdr.msglen)
                     {
                     GUARDNN_IGN_INT((recv(csock[i],msgbuf,msghdr.msglen,
                        MSG_WAITALL)),"7-recv(csock)");
                     MSG_HEADER(stderr,i);
                     write(2,msgbuf,msghdr.msglen);
                     }
                  break;

               case BSPTCP_MSG_EXIT:   
                  GUARDEQ_IGN_INT(recv(csock[i],(char *)&rc,sizeof(int),
                     MSG_WAITALL),sizeof(int),"8-recv(csock)");
                  MSG_HEADER(stderr,0);
#ifdef DEBUG
                  fprintf(stderr,
                     "BSP/TCP Master: BSP pid %d ended (status = %d).\n",
                     msghdr.msgspid,rc);
#endif
                  close(csock[i]); csock[i] = 0;
                  procs_left--;
                  break;
               }
             
            fd_count--;
            }

      /* if cleanup initiated then send kill to all and shut down */ 
      if (cleanup)
         {
         int sig;
         int status;

         msghdr.msgtype = BSPTCP_MSG_SIGNAL;
         msghdr.msglen = sizeof(sig);
         sig = 9;
         for (i = 1; i < bsp_nprocs; i++)
            if (csock[i])
               {
               msghdr.msgspid = 0;
               msghdr.msgdpid = i;
               GUARDNN_IGN_INT((send(csock[i],(char *)&msghdr,
                  sizeof(msghdr),0)),"send(csock)");
               GUARDNN_IGN_INT((send(csock[i],(char *)&sig,sizeof(sig),0)),
                  "send(csock)");
               close(csock[i]); csock[i] = 0;
               }

         if (spmd_pid) 
            kill(spmd_pid,9); 
         if (spmd_pid && waitpid(spmd_pid,&status,0) > 0)
            {
            if (WIFEXITED(status))
               {
               MSG_HEADER(stderr,0);
               fprintf(stderr,"BSP/TCP Master: BSP pid 0 issued exit(%d).\n",
                  WEXITSTATUS(status)); 
               }
            else
               if (WIFSIGNALED(status))
                  {
                  MSG_HEADER(stderr,0);
                  fprintf(stderr,"BSP/TCP Master: BSP pid 0 received sig %d.\n",
                     WTERMSIG(status)); 
                  }
               }

         close(ucpipe[0]); ucpipe[0] = 0;
         close(dcpipe[1]); dcpipe[1] = 0;
         close(cxpipe[0]); cxpipe[0] = 0;
         close(cxpipe[1]); cxpipe[1] = 0;
         exit(1);
         } 

      } /* end of while (procs_left) */

   /* Final exit */ 
   close(cxpipe[0]); cxpipe[0] = 0;
   close(cxpipe[1]); cxpipe[1] = 0;
   wait(NULL);
   MSG_HEADER(stderr,0);
#ifdef DEBUG
   fprintf(stderr,"BSP/TCP Master: BSP computation finished.\n");
#endif
   exit(0);
   }

  /*
   * When the BSP pid 0 process ends, no message is sent on a pipe. This 
   * signal handler sends the notification of the child exit or signal to
   * the mainline Master routine.
   */

void spmdreap(int sig)
   {
   int status;                       /* process exit status */
   bsptcp_msghdr_t msghdr;           /* sending message to mainline */
   int value;

   GUARDEQ(setup_complete,1,"spmdreap(unexpected signal or exit called)");   
   waitpid(spmd_pid,&status,0);
   value = -1;
   if (WIFEXITED(status))
      {
      msghdr.msgtype = BSPTCP_MSG_EXIT;
      value = WEXITSTATUS(status);
      }
   else
      if (WIFSIGNALED(status))
         {
         msghdr.msgtype = BSPTCP_MSG_SIGNAL;
         value = WTERMSIG(status);
         }
  
   spmd_pid = 0; 
   msghdr.msglen = sizeof(value);
   msghdr.msgspid = 0;
   msghdr.msgspid = 0;
   write(cxpipe[1],&msghdr,sizeof(msghdr));
   write(cxpipe[1],&value,sizeof(msghdr));
   }
\end{code}
@

head	1.1;
access;
symbols;
locks
	jonh:1.1; strict;
comment	@# @;


1.1
date	97.07.11.10.28.38;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@% $Id$
% $Log$

\begin{code}
  /* 
   * This program, bsptcps.c, is the slave BSP/TCP program started by the 
   * BSP/TCP daemon program when a user processor request is initiated 
   * (as a result of a BSPLib program executing bsp_begin). This program
   * is responsible for a slave end of a session. The requesting socket 
   * started as the result of the accept() in bsptcpd.c is used as a 
   * communication socket with the master process which initiated the 
   * request (the master executes as a result of the BSP pid 0 process
   * reaching it's bsp_begin statement). 
   *
   * The name of the SPMD program is supplied to bsptcps.c using the socket.
   * This program forks. The child closes fd's 0, 1 and 2. Fd 0 is re-opened
   * as /dev/null and pipes are created for fd's 1 and 2. This is done so 
   * that any output from the program can be shipped back and printed on the 
   * stdout and stderr of the BSP pid 0 program. The BSP pid of this program 
   * is also supplied using the socket from the master. This is set as an 
   * an environment variable and the supplied path name of the SPMD program 
   * is exec'ed in the child. A control pipe is also created so that the 
   * SPMD program (in BSPLib calls) can communicate with the master via the 
   * slave process. The fd's of the pipe are also stored in environment 
   * variables.
   */

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>

#include <sys/time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#ifdef BSPTCP_OSAIX
#include <sys/select.h>
#endif
#include <netinet/in.h>

#include "bsptcpdefs.h"

  /*
   * Global variables:
   */

bsptcp_msghdr_t msghdr;          /* message header struct */
char msgbuf[200];                /* message buffer */
int bsp_pid;                     /* BSP pid of local SPMD program */
int csock = 0;                   /* fd of socket back to master */
volatile int setup_complete = 0; /* slave initialisation complete */
volatile int spmd_pid;           /* pid of the SPMD child */
int cxpipe[2];                   /* child exit/signal notify pipe */

  /*
   * Define macros used to control error report and execution aborting
   * and include the functions used to guard system calls for errors:
   * The definition of the included guarding functions expand the macros
   * and hence are customsed by the macros for the particular BSP/TCP 
   * component.
   */

#define BSPTCP_COMPONENT "BSP/TCP Slave"   /* component identifier */
#define ABORT_MSG_OK csock                 /* ABORT_MSG & ABORT_EXIT are ok */
#define ABORT_EXIT(exitcode)               /* request to abort and exit */ \
         { \
         msghdr.msgtype = BSPTCP_MSG_ABORT; \
         msghdr.msglen = 0; \
         msghdr.msgspid = bsp_pid; \
         msghdr.msgdpid = 0; \
         send(csock,(char *)&msghdr,sizeof(msghdr),0); \
         send(csock,msgbuf,strlen(msgbuf),0); \
         close(csock); csock = 0; \
         exit(exitcode); \
         }
#define ABORT_MSG(text)            /* send reason for aborting execution */ \
         { \
         msghdr.msgtype = BSPTCP_MSG_STDERR; \
         msghdr.msglen = strlen(text); \
         msghdr.msgspid = bsp_pid; \
         msghdr.msgdpid = 0; \
         send(csock,(char *)&msghdr,sizeof(msghdr),0); \
         send(csock,msgbuf,strlen(text),0); \
         }

#include "bsptcperrs.h"               /* system call guarding functions */


#define IGN_INT(fn) \
   { \
   while ((check_rc = fn) <= 0 && errno == EINTR); \
   }

#define GUARDNN_IGN_INT(fn,msg) \
   { \
   while ((check_rc = fn) <= 0 && errno == EINTR); \
   GUARDNN(check_rc,msg); \
   }

#define GUARDEQ_IGN_INT(fn,val,msg) \
   { \
   while ((check_rc = fn) <= 0 && errno == EINTR); \
   GUARDEQ(check_rc,val,msg); \
   }

  /*
   * Additional prototypes:
   */

void spmdreap(int sig);

void main(int argc, char *argv[])
   {
   int i, rc, check_rc;

   int ucpipe[2];                   /* pipe fds between SPMD prog and slave */
   int dcpipe[2];                   /* pipe fds between SPMD prog and slave */

   int bsp_nprocs;                  /* number of BSP processors */
   int stdout_pipefd[2];            /* stdout fds returned from pipe */
   int stderr_pipefd[2];            /* stderr fds returned from pipe */

   int spmd_stdout;                 /* read side of pipe for SPMD stdout */
   int spmd_stderr;                 /* read side of pipe for SPMD stderr */
   char spmd_prog[80];              /* SPMD program and path */
   char *spmd_arg[2];               /* SPMD program arguments */

   fd_set readfd;                   /* fd's to watch for reading */
   fd_set exceptfd;                 /* fd's to watch for exceptions */
   struct timeval timeout;          /* select timeout value */
   int maxfd;                       /* max fd value for select */
   int cleanup;                     /* initiate cleanup */
   int exitset;                     /* SPMD initiated exit */

   struct sigaction sigchild;       /* action for SIGCHLD signal */

  /*
   * Get the socket fd from the command line argument:
   */

   if (argc != 2)
      {
      fprintf(stderr,"BSP/TCP Slave: command line argument error.\n");
      exit(1);
      }
   if (1 != sscanf(argv[1],"%d",&csock))
      {
      fprintf(stderr,"BSP/TCP Slave: expected port missing from command line.\n");
      exit(2);
      }

  /*
   * Send acknowledge on socket and get name and BSP pid of SPMD program
   * and the number of BSP processes used in computation.
   */

   /* send acknowledgement to master */
   msghdr.msgtype = BSPTCP_MSG_ACK;
   msghdr.msglen = 0;
   msghdr.msgspid = bsp_pid;
   msghdr.msgdpid = 0;
   GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
      "send(csock) ack");

   /* get SPMD program name from master */
   GUARDEQ_IGN_INT((recv(csock,(char *)&msghdr,sizeof(msghdr),MSG_WAITALL)),
      sizeof(msghdr),"recv(csock) spmd header");
   GUARDEQ_IGN_INT((recv(csock,spmd_prog,msghdr.msglen,MSG_WAITALL)),
      msghdr.msglen,"recv(csock) spmd name");
   spmd_prog[msghdr.msglen] = 0;

   /* get BSP pid of SPMD program from master */
   GUARDEQ_IGN_INT((recv(csock,(char *)&msghdr,sizeof(msghdr),MSG_WAITALL)),
      sizeof(msghdr),"recv(csock) BSP pid header");
   if (msghdr.msglen != sizeof(bsp_pid))
      {
      fprintf(stderr,"BSP/TCP Slave: error in size of expected message.\n");
      exit(7);
      }
   GUARDEQ_IGN_INT((recv(csock,(char *)&bsp_pid,sizeof(bsp_pid),MSG_WAITALL)),
      sizeof(bsp_pid),"recv(csock) BSP pid");

   /* set environment variable indicating the BSP pid to SPMD program */
   sprintf(msgbuf,"%d",bsp_pid);
   GUARDZ(setenv("BSPTCP_PID",msgbuf,1),"setenv()");
  
   /* get actual number of BSP procs */
   GUARDEQ_IGN_INT((recv(csock,(char *)&msghdr,sizeof(msghdr),MSG_WAITALL)),
      sizeof(msghdr),"recv(csock) BSP nprocs header");
   if (msghdr.msglen != sizeof(bsp_nprocs))
      {
      fprintf(stderr,"BSP/TCP Slave: error in size of expected message.\n");
      exit(11);
      }
   GUARDEQ_IGN_INT((recv(csock,(char *)&bsp_nprocs,sizeof(bsp_nprocs),
      MSG_WAITALL)),sizeof(bsp_nprocs),"recv(csock) BSP nprocs");

   /* set environment variable indicating number of procs to SPMD program */
   sprintf(msgbuf,"%d",bsp_nprocs);
   GUARDZ(setenv("BSPTCP_NPROCS",msgbuf,1),"setenv()");
  
  /* 
   * Re-arrange stdin, stdout and stderr so that the data from the SPMD
   * program can be sent back to the master (bsptcpm.c) and that stdin 
   * can be redirected from /dev/null.
   */

   /* redirect stdin from /dev/null */
   close(0); 
   open("/dev/null",O_RDONLY);

   /* create a pipe for the SPMD program's stdout */
   GUARDZ(pipe(stdout_pipefd),"pipe()");
   GUARDEQ(dup2(stdout_pipefd[1],1),1,"dup2(stdout)");
   spmd_stdout = stdout_pipefd[0];

   /* create a pipe for the SPMD program's stderr */
   GUARDZ(pipe(stderr_pipefd),"pipe()");
   GUARDEQ(dup2(stdout_pipefd[1],2),2,"dup2(stdout)");
   spmd_stderr = stderr_pipefd[0];

  /*
   * setup reaper for child BSP process improper termination:
   */

   memset(&sigchild,0,sizeof(sigchild));
   sigchild.sa_handler = spmdreap;
#ifdef SA_RESTART
   sigchild.sa_flags = SA_NOCLDSTOP+SA_RESTART;
#else
   sigchild.sa_flags = SA_NOCLDSTOP;
#endif

   GUARDZ(pipe(cxpipe),"pipe(cxpipe)");
   GUARDZ(sigaction(SIGCHLD,&sigchild,NULL),"sigaction(SIGCHLD)");

  /*
   * Any errors from now on have to be reported to the master process
   * (unless it is an error with the control socket).
   */

  /* 
   * create a controlling pipe for the SPMD program to communicate 
   * with the master process via the slave process. The fds of the 
   * pipe are stored in environement variables so that the 
   * BSP library code can communicate with the slave and master 
   * processes.
   */
   GUARDZ(pipe(ucpipe),"pipe(ucpipe)");
   GUARDZ(pipe(dcpipe),"pipe(dcpipe)");

   /* save fds in environment variables */
   sprintf(msgbuf,"%d",dcpipe[0]);
   GUARDZ(setenv("BSPTCP_CPIPE_READ",msgbuf,1),"setenv()");
   sprintf(msgbuf,"%d",ucpipe[1]);
   GUARDZ(setenv("BSPTCP_CPIPE_WRITE",msgbuf,1),"setenv()");

  /*
   * Fork off the SPMD program. 
   */

   /* create the child for the SPMD program */
   spmd_pid = fork();
   GUARDNN(spmd_pid,"fork()");

   /* child of slave passes control to SPMD program */
   if (spmd_pid == 0)
      {
      /* close unused pipe fds */
      close(dcpipe[1]); dcpipe[1] = 0;
      close(ucpipe[0]); ucpipe[0] = 0;
      close(stdout_pipefd[0]); stdout_pipefd[0] = 0;
      close(stderr_pipefd[0]); stderr_pipefd[0] = 0;


      spmd_arg[0] = spmd_prog;
      printf(spmd_prog);
      spmd_arg[1] = NULL;
      execvp(spmd_arg[0],spmd_arg);
      
      /* if execution gets here then error with execvp() call */
      GUARDZ(1,"execvp()");
      }

  /*
   * This code is now the slave process. The slave now waits for data from 
   * the SPMD program and sends any data received back to the master 
   * process. 
   */

   /* close unused pipe fds */
   close(dcpipe[0]); dcpipe[0] = 0;
   close(ucpipe[1]); ucpipe[1] = 0;
   close(stdout_pipefd[1]); stdout_pipefd[1] = 0;
   close(stderr_pipefd[1]); stderr_pipefd[1] = 0;

   /* set the fds to non-blocking */
   GUARDNN(fcntl(spmd_stdout,F_SETFL,O_NONBLOCK),"fcntl(spmd_stdout)");
   GUARDNN(fcntl(spmd_stderr,F_SETFL,O_NONBLOCK),"fcntl(spmd_stderr)");
 
   /* setup select fd sets */
   maxfd = spmd_stdout;
   if (spmd_stderr > maxfd) maxfd = spmd_stderr;
   if (csock > maxfd) maxfd = csock;
   if (ucpipe[0] > maxfd) maxfd = ucpipe[0];
   if (cxpipe[0] > maxfd) maxfd = cxpipe[0];
   exitset = 0;
 
   while(1)
      {
      int fd_count;
      int remote_sig;
      int use_sig = 0;

      setup_complete = 1;   
 
      FD_ZERO(&readfd);
      FD_ZERO(&exceptfd);

      timeout.tv_sec = BSPTCP_TIMEOUT_HIGH; 
      timeout.tv_usec = 0;
      cleanup = 0; 

      if (spmd_stdout) 
         {
         FD_SET(spmd_stdout,&readfd);
         FD_SET(spmd_stdout,&exceptfd);
         }
      if (spmd_stderr) 
         {
         FD_SET(spmd_stderr,&readfd);
         FD_SET(spmd_stderr,&exceptfd);
         }
      if (csock) 
         {
         FD_SET(csock,&readfd);
         FD_SET(csock,&exceptfd);
         }
      if (ucpipe[0])
         {
         FD_SET(ucpipe[0],&readfd);
         FD_SET(ucpipe[0],&exceptfd);
         }
      if (cxpipe[0])
         {
         FD_SET(cxpipe[0],&readfd);
         FD_SET(cxpipe[0],&exceptfd);
         }
  
      fd_count = select(maxfd+1,&readfd,NULL,&exceptfd,&timeout);
      if (fd_count < 0 && errno == EINTR) continue;
      GUARDNN(fd_count,"select()");

      if (!fd_count) cleanup = 1; /* no activity for a while - cleanup */

      if (fd_count && FD_ISSET(ucpipe[0],&exceptfd))
            {
            msghdr.msgtype = BSPTCP_MSG_STDERR;
            msghdr.msgspid = bsp_pid;
            msghdr.msgdpid = 0;
            sprintf(msgbuf,"BSP/TCP Slave: control pipe exception.\n");
            msghdr.msglen = strlen(msgbuf);
            GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
               "send(csock) header");
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock) data");
            close(ucpipe[0]); ucpipe[0] = 0;
            fd_count--;
            }

      if (fd_count && FD_ISSET(cxpipe[0],&exceptfd))
            {
            msghdr.msgtype = BSPTCP_MSG_STDERR;
            msghdr.msgspid = bsp_pid;
            msghdr.msgdpid = 0;
            sprintf(msgbuf,"BSP/TCP Slave: signal pipe exception.\n");
            msghdr.msglen = strlen(msgbuf);
            GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
               "send(csock) header");
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock) data");

            close(cxpipe[0]); cxpipe[0] = 0;
            cleanup = 1;
            fd_count--;
            }

      if (fd_count && FD_ISSET(csock,&exceptfd))
            {
            /* cut off from master process - cannot inform anyone */
            cleanup = 1;
            fd_count--;
            }

      /* if exceptions on stderr/stdout the then just close them */
      if (fd_count && FD_ISSET(spmd_stdout,&exceptfd))
         {
         close(spmd_stdout); spmd_stdout = 0;
         fd_count--;
         }
      if (fd_count && FD_ISSET(spmd_stderr,&exceptfd))
         {
         close(spmd_stderr); spmd_stderr = 0;
         fd_count--;
         }

      if (fd_count && spmd_stdout && FD_ISSET(spmd_stdout,&readfd))
         {
         /* SPMD program has stdout data */
         while((msghdr.msglen = read(spmd_stdout,msgbuf,
               sizeof(msgbuf))) > 0)
            { 
            msghdr.msgtype = BSPTCP_MSG_STDOUT;
            msghdr.msgspid = bsp_pid;
            msghdr.msgdpid = 0;
            GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
               "send(csock)");
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock)");
            }
         fd_count--;
         }

      if (fd_count && spmd_stderr && FD_ISSET(spmd_stderr,&readfd))
         {
         /* SPMD program has stderr data */
         while((msghdr.msglen = read(spmd_stderr,msgbuf,
               sizeof(msgbuf))) > 0)
            { 
            msghdr.msgtype = BSPTCP_MSG_STDERR;
            msghdr.msgspid = bsp_pid;
            msghdr.msgdpid = 0;
            GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
               "send(csock)");
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock)");
            }
         fd_count--;
         }

      if (fd_count && csock && FD_ISSET(csock,&readfd))
         {
         /* data has arrived for slave on socket */
         GUARDNN_IGN_INT((recv(csock,(char *)&msghdr,sizeof(msghdr),
            MSG_WAITALL)),"recv(csock)");

         if (msghdr.msgtype == BSPTCP_MSG_ABORT)
            {
            kill(spmd_pid,9); 
            wait(NULL);
            close(cxpipe[0]); cxpipe[0] = 0;
            close(cxpipe[1]); cxpipe[1] = 0;
            exit(1);
            }

         if (msghdr.msgtype == BSPTCP_MSG_CDATA)
            {
            GUARDNN_IGN_INT((write(dcpipe[1],&msghdr,sizeof(msghdr))),
               "write(dcpipe)");
            GUARDNN_IGN_INT((recv(csock,msgbuf,msghdr.msglen,MSG_WAITALL)),
               "recv(csock)");
            GUARDNN_IGN_INT((write(dcpipe[1],msgbuf,msghdr.msglen)),
               "write(dcpipe)");
            }
         else
            if (msghdr.msgtype == BSPTCP_MSG_SIGNAL)
               {
               GUARDNN_IGN_INT((recv(csock,(char *)&remote_sig,
                  sizeof(remote_sig),MSG_WAITALL)),"recv(csock)");
               kill(spmd_pid,remote_sig);
               wait(NULL);
               close(csock); csock = 0;
               close(cxpipe[0]); cxpipe[0] = 0;
               close(cxpipe[1]); cxpipe[1] = 0;
               exit(-1);
               }
            else
               { /* the data was not expected */
               fprintf(stderr,"BSP/TCP Slave: unexpected data received.\n");
               kill(spmd_pid,9);
               wait(NULL);
               close(csock); csock = 0;
               close(cxpipe[0]); cxpipe[0] = 0;
               close(cxpipe[1]); cxpipe[1] = 0;
               exit(-1);
               }
         fd_count--;
         }

      if (fd_count && ucpipe[0] && FD_ISSET(ucpipe[0],&readfd))
         {
         /* data has arrived on control pipe from BSP process */
         IGN_INT((rc = read(ucpipe[0],&msghdr,sizeof(msghdr))));
         if (rc == 0) 
            {
            close(ucpipe[0]); ucpipe[0] = 0;
            msghdr.msgtype = BSPTCP_MSG_STDERR;
            msghdr.msgspid = bsp_pid;
            msghdr.msgdpid = 0;
            sprintf(msgbuf,"BSP/TCP Slave: control pipe end-of-file.\n");
            msghdr.msglen = strlen(msgbuf);
            GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
               "send(csock) header");
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock) data");
            fd_count--;
            continue;
            }
         GUARDEQ(rc,sizeof(msghdr),"read(ucpipe) header");
         
         if (msghdr.msglen)
            GUARDEQ_IGN_INT((read(ucpipe[0],msgbuf,msghdr.msglen)),
               msghdr.msglen,"read(ucpipe) data");

         if (msghdr.msgtype == BSPTCP_MSG_ABORT)
            {
            IGN_INT(write(dcpipe[1],&msghdr,sizeof(msghdr))); /* ack */
            exitset = 1;
            }
 
         if (msghdr.msgtype == BSPTCP_MSG_SIGNAL)
            {
            GUARDEQ_IGN_INT((read(ucpipe[0],&use_sig,msghdr.msglen)),
               msghdr.msglen,"read(ucpipe) signal");
            IGN_INT(write(dcpipe[1],&msghdr,sizeof(msghdr))); /* ack */
            cleanup = 1;
            }
 
         if (msghdr.msgtype == BSPTCP_MSG_EXIT)
            {
            GUARDNN_IGN_INT((write(dcpipe[1],&msghdr,sizeof(msghdr))),
               "write(dcpipe)");
            exitset = 1;
            }
 
         /* send message onto master process */
         GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
            "send(csock) header");
         if (msghdr.msglen) 
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock) data");
         fd_count--;
         }

      if (fd_count && cxpipe[0] && FD_ISSET(cxpipe[0],&readfd))
         {
         /* child issued improper exit or received a signal */
         GUARDEQ_IGN_INT((read(cxpipe[0],&msghdr,sizeof(msghdr))),
            sizeof(msghdr),"read(cxpipe) header");

         if (msghdr.msgtype == BSPTCP_MSG_EXIT)
            {
            int status;

            IGN_INT(read(cxpipe[0],&status,sizeof(status)));
            msghdr.msgtype = BSPTCP_MSG_STDERR;
            msghdr.msgspid = bsp_pid;
            msghdr.msgdpid = 0;
            sprintf(msgbuf,"BSP/TCP Slave: improper exit (status = %d).\n",
               status);
            msghdr.msglen = strlen(msgbuf);
            GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
               "send(csock) header");
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock) data");

            cleanup = 1;
            }

         if (msghdr.msgtype == BSPTCP_MSG_SIGNAL)
            {
            int sig;

            IGN_INT(read(cxpipe[0],&sig,sizeof(sig)));
            msghdr.msgtype = BSPTCP_MSG_STDERR;
            msghdr.msgspid = bsp_pid;
            msghdr.msgdpid = 0;
            sprintf(msgbuf,"BSP/TCP Slave: signal %d received.\n",
               sig);
            msghdr.msglen = strlen(msgbuf);
            GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
               "send(csock) header");
            GUARDNN_IGN_INT((send(csock,msgbuf,msghdr.msglen,0)),
               "send(csock) data");

            cleanup = 1;
            }
         }

      /* cleanup: remove SPMD process if still present and broadcast signal */ 
      if (cleanup)
         {
         int sig;

         msghdr.msgtype = BSPTCP_MSG_SIGNAL;
         msghdr.msglen = sizeof(sig);
         sig = use_sig ? use_sig : 9;
         msghdr.msgspid = bsp_pid;
         msghdr.msgdpid = 0;
         GUARDNN_IGN_INT((send(csock,(char *)&msghdr,sizeof(msghdr),0)),
            "send(csock) header");
         GUARDNN_IGN_INT((send(csock,(char *)&sig,sizeof(sig),0)),
            "send(csock) data");
         if (spmd_pid) 
            {
            kill(spmd_pid,9); 
            wait(NULL);
            }
         close(csock); csock = 0;
         close(ucpipe[0]); ucpipe[0] = 0;
         close(dcpipe[1]); dcpipe[1] = 0;
         close(cxpipe[0]); cxpipe[0] = 0;
         close(cxpipe[1]); cxpipe[1] = 0;
         exit(1);
         } 

      /* cleanup if SPMD program initiated exit */
      if (exitset)
         {
         wait(NULL);
         close(csock); csock = 0;
         close(ucpipe[0]); ucpipe[0] = 0;
         close(dcpipe[1]); dcpipe[1] = 0;
         close(cxpipe[0]); cxpipe[0] = 0;
         close(cxpipe[1]); cxpipe[1] = 0;
         exit(0);
         } 

      } /* end of while(1) */
             
   }

  /*
   * When the BSP process ends improperly, no message is sent on a pipe. 
   * This signal handler sends the notification of the exit or signal to 
   * the mainline slave routine.
   */

void spmdreap(int sig)
   {
   int status;                       /* process exit status */
   bsptcp_msghdr_t msghdr;           /* sending message to mainline */

   GUARDEQ(setup_complete,1,"spmdreap(unexpected signal or exit called)");

   waitpid(spmd_pid,&status,0);
   if (WIFEXITED(status))
      msghdr.msgtype = BSPTCP_MSG_EXIT;
   else
      if (WIFSIGNALED(status))
         msghdr.msgtype = BSPTCP_MSG_SIGNAL;

   spmd_pid = 0;
   msghdr.msglen = sizeof(status);
   msghdr.msgspid = bsp_pid;
   msghdr.msgdpid = 0;
   write(cxpipe[1],&msghdr,sizeof(msghdr));
   write(cxpipe[1],&status,sizeof(msghdr));
   }
\end{code}
@

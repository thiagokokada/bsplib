head	1.3;
access;
symbols;
locks
	jonh:1.3; strict;
comment	@# @;


1.3
date	96.03.05.16.29.59;	author jonh;	state Exp;
branches;
next	1.2;

1.2
date	95.10.13.15.07.56;	author jonh;	state Exp;
branches;
next	1.1;

1.1
date	95.06.20.15.56.11;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.3
log
@adding all-to-all and neighbour exchanges
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Benchmarks to calculate the BSP cost parameters}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: bsp_probe.lc,v 1.2 1995/10/13 15:07:56 jonh Exp jonh $
% $Log: bsp_probe.lc,v $
# Revision 1.2  1995/10/13  15:07:56  jonh
# Total change...
#
# Revision 1.1  1995/06/20  15:56:11  jonh
# Initial revision
#


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Imports, global variables, and forward references}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
#ifdef _BSPFRONT_
#include "bsp.h"
#include "bsp_level1.h"
#else
extern double bsp_time();
extern double bsp_dtime();
#endif
#include <stdio.h>
#include <stdlib.h>
#include <sys/utsname.h>
#include <math.h>


#define S_OVERSAMPLE 50
#define L_OVERSAMPLE 5000   /* 5000 */
#define G_OVERSAMPLE 30     /* 30 */

#define DOT_PRODUCT_SIZE 1000000
#define DO_DIFFERENT_HREL 0
#define MAX_H  16384    /* Such that MAX_H/bsp_p > 500 */
#define MIN_BLOCK_SIZE 1
\end{code}

\begin{code} 
int     my_pid;
int     bsp_p = 4;    /* number of processors            */
static  int bsp_s, bsp_l;
static  double bsp_g;
static double time_clockA, time_clockB;
\end{code}

\begin{code}
extern int measureBSPcostS();
extern int measureBSPcostL();
extern double measureBSPcostG(int,int,int);
extern void   double_add();
extern void   double_mult();
\end{code}

\begin{code}
#ifndef _BSPFRONT_
void bsp_error(char *format,...) {
  printf("ERROR: %s\n",format);
  exit(1);
}
#endif
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{\texttt{main} program}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void main(int argc, char **argv) {
   int i,j,k,hrel;
   char filename[30];
   double temp_g[64];

   bspstart(argc,argv,0,&bsp_p,&my_pid);
   if (my_pid==0)
     printf("Started probe on %d processors\n",bsp_p);

   bsp_s       = measureBSPcostS();
   if (my_pid==0) printf("S = %.3f Mflops\n",(bsp_s/1000)/1000.0);
   bsp_l       = measureBSPcostL();
   if (my_pid==0) 
     printf("L = %d (%f usec)\n",bsp_l,
            (double)(bsp_l*1000)/(double)(bsp_s/1000));

   hrel = DO_DIFFERENT_HREL?bsp_p:2;
   for(j=1;j<hrel;j++) {
     k=0;
     for(i=MAX_H/j;i>=MIN_BLOCK_SIZE;i = i/ 2) { 
       bsp_g = measureBSPcostG(j,i,MAX_H/j);
       temp_g[k++] = bsp_g;
     }
     if (my_pid==0)
       printf("Nhalf = %f\n",(temp_g[k-1]/temp_g[0])-1.0);
   }
   
   bspfinish(); 
}
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Calculute the value of S}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
void double_add(double *res, double *x, double *y, int *nbytes) {*res = *x+*y;}
void double_max(double *res, double *x, double *y, int *nbytes) {
  *res = (*x>*y)?(*x):(*y);
}
void double_min(double *res, double *x, double *y, int *nbytes) {
  *res = (*x<*y)?(*x):(*y);
}


int measureBSPcostS() 
{
  int i,j,up=1,dummy=0;
  float dot_product = 0.0;
  float *vecA;
  float *vecB;

  vecA = calloc(DOT_PRODUCT_SIZE,sizeof(float));
  vecB = calloc(DOT_PRODUCT_SIZE,sizeof(float));
  if (vecA==NULL || vecB==NULL)
    bsp_error("Failed to allocate vector for dot product used in S");

  for (i=0; i < DOT_PRODUCT_SIZE; i++) {
     vecA[i] = 0.01;
     vecB[i] = 0.02;
  }
  bspsstep(0);
  bspsstep_end(0);
  time_clockA = bsp_time();
  for (i=0;i<S_OVERSAMPLE;i++) {
    if (up) {
      for (j=0; j < DOT_PRODUCT_SIZE; j++) {
        dot_product += vecA[j] * vecB[j]; 
        dummy++;
      }
      up = 0;
    } else {
      for (j=DOT_PRODUCT_SIZE-1; j>=0;j--) {
        dot_product += vecA[j] * vecB[j]; 
        dummy++;
      }
      up = 1;
    }
  }
  if (dot_product>0 && dummy>DOT_PRODUCT_SIZE) {
     /* Need this conditional, otherwise the optimiser removes the
        dot-product as it isnt used in the code from here on */
     time_clockB = bsp_dtime();
  }

  /* Remove the cost of the loop overhead */
  for (i=0;i<S_OVERSAMPLE;i++) {
    if (up) {
      for (j=0; j < DOT_PRODUCT_SIZE; j++) dummy++;
      up = 0;
    } else {
      for (j=DOT_PRODUCT_SIZE-1; j>=0;j--) dummy++;
      up = 1;
    }
  }
  if (dot_product>0 && dummy>DOT_PRODUCT_SIZE) {
     /* Need this conditional, otherwise the optimiser removes the
        dot-product as it isnt used in the code from here on */
     time_clockA = time_clockB - bsp_dtime();
  }
  printf("time is %f\n",time_clockA);
  bspreduce(double_max,&time_clockA,&time_clockB,sizeof(double));
  
  free(vecA); free(vecB);

  /* 2 flops * over_sample * scale factor of 5 * dot_product_size */
  return ((int) ((double) (2*S_OVERSAMPLE*DOT_PRODUCT_SIZE) / 
                 time_clockB));
 }
\end{code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Calculute the value of L}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
int measureBSPcostL() 
{
  int i;

  bspsstep(0);
  bspsstep_end(0);
  time_clockA = bsp_dtime();
  for (i=0; i < L_OVERSAMPLE; i++) {
    bspsstep(3);
      /* Do nothing */
    bspsstep_end(3);   
  }
  time_clockA = bsp_dtime();
  bspreduce(double_min,&time_clockA,&time_clockB,sizeof(double));
 
  return ((time_clockB*bsp_s) / L_OVERSAMPLE);
 }
\end{code}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Calculute the value of G}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{code}
double measureBSPcostG(int relation_arity,int block_size, int tot_size) {
  static int src[MAX_H],dst[MAX_H];
  static double time_clockA, time_clockB;
  int comm_to;
  int i,j;

  comm_to  = ( relation_arity - (my_pid%relation_arity) +  my_pid) % bsp_p;

  bspsstep(0);
  bspsstep_end(0);

  time_clockA = bsp_dtime();
  for(i=0;i<G_OVERSAMPLE;i++) {
    bspsstep(1);
      for(j=0;j<tot_size;j+=block_size) 
        bspstore(comm_to,&src[j],&dst[j],block_size*sizeof(int));
    bspsstep_end(1);
  }
  time_clockA = bsp_dtime();
  bspreduce(double_add,&time_clockA,&time_clockB,sizeof(double));
  time_clockB = time_clockB/bsp_p;
  i  = ((time_clockB*bsp_s) - (bsp_l*G_OVERSAMPLE)) / 1000;
  j  = G_OVERSAMPLE*tot_size*relation_arity/1000;
  if (my_pid==0)
    printf("[%.2fs] g=%7.2f (%7.3f usec)] %d-rel of size %d [block size=%d]\n",
           time_clockB,(double)i / (double)j,
           (((double)i / (double)j)*1000000.0)/bsp_s,
           relation_arity,tot_size,block_size);
  return ((double) i) / ((double) j);
}
\end{code}
@


1.2
log
@Total change...
@
text
@d4 1
a4 1
% $Id: bsp_probe.lc,v 1.1 1995/06/20 15:56:11 jonh Exp jonh $
d6 3
d18 7
d26 1
a28 1
#include "prelude.h"
d30 9
a38 7
#define MAX_P	                    10
#define LARGE_LOOP_ITERATIONS  1000000
#define SMALL_LOOP_ITERATIONS     3000
#define MAX_PACKET_SIZE        1000000
#define DEFAULT_PACKET_SIZE        100
#define NO_TIMEOUTS                 20
#define ERROR_BUFFER_SIZE         1024
d41 1
a41 4
\begin{code}
static char *usage_str = "usage: bspprobe [-gnuplotp] [-gnuploth] [-r float] [-h number]";
float   profile_resolution = 1.0;
int     packet_size        = DEFAULT_PACKET_SIZE;
d43 4
a46 1
int     logAsGnuplot       = 0;
d50 5
a54 30
int     bsp_p = 4;                       /* number of processors            */
static double bsp_s, all_bsp_s[MAX_P];   /* processor speed,i.e., ops/second*/
static double bsp_l, all_bsp_l[MAX_P];   /* bulk synchronisation period     */
static double bsp_randoms_g, 
              all_bsp_randoms_g[MAX_P];  /* global communication via */
				         /* random send              */
static double bsp_constants_g, 
              all_bsp_constants_g[MAX_P];/* global communication via */
					 /* constant send            */

static double bsp_reverses_g, 
              all_bsp_reverses_g[MAX_P]; /* global communication via */
					 /* reverse send            */
static double bsp_randomf_g, 
              all_bsp_randomf_g[MAX_P];  /* global communication via */
				         /* random fetch             */
static double bsp_constantf_g, 
              all_bsp_constantf_g[MAX_P];/* global communication via */
					 /* constant fetch            */

static double bsp_reversef_g, 
              all_bsp_reversef_g[MAX_P]; /* global communication via */
					 /* reverse fetch             */

static double avg_bsp_s;
static double avg_bsp_l;
static double avg_bsp_constants_g,avg_bsp_randoms_g,avg_bsp_reverses_g ,
              avg_bsp_constantf_g,avg_bsp_randomf_g,avg_bsp_reversef_g;

char error_buffer[ERROR_BUFFER_SIZE];
d58 6
a63 10
extern double measureBSPcostS();
extern double measureBSPcostL();
extern double measureBSPcostG();
extern void   double_add();
extern void   double_mult();
extern void   logBSPresults();
extern void   logGnuplotResults();
extern int    bsp_random_pid();
extern int    bsp_reverse_pid();
extern int    bsp_constant_pid();
d71 3
a73 5
   int   i, temp;
   float ftemp;
   bool  command_line_error = False;
   bool  command_line_opts  = True;

a74 3
#ifdef _BSPFRONT_
   bsp_start(0,&bsp_p,&my_pid);
#else
d76 2
a77 2
#endif
   initWatch();
d79 16
a94 90
   i=1;
   verboseMode(False);
   while (command_line_opts) {
      if (i == argc) {
         command_line_opts = False;
       }
      else if (strcmp(argv[i],"-v")==0) {
         verboseMode(True);
         i += 1;
       }
     else if (strcmp(argv[i],"-gnuplotp")==0) {
         logAsGnuplot      = 1;
         i += 1;
       }
      else if (strcmp(argv[i],"-gnuploth")==0) {
         logAsGnuplot      = 2;
         i += 1;
       }
      else if ( (strcmp(argv[i],"-r")==0) &&
                (sscanf(argv[i+1],"%f",&ftemp))) {
         profile_resolution = ftemp;
         i += 2;
       }
      else if ( (strcmp(argv[i],"-h")==0) &&
                (sscanf(argv[i+1],"%d",&temp))) {
         packet_size = temp;
         i += 2;
         sprintf(error_buffer,"packet size (-h) must be less than %d",
                 MAX_PACKET_SIZE);
         bspErrorBottom((packet_size > MAX_PACKET_SIZE),
                        "main", error_buffer);
       }
      else {
         command_line_error = True;  
         i += 2;
      }
    }
   bspErrorBottom(command_line_error,"main",usage_str);
\end{code}

\begin{code}
   verbose("Starting to measure S");
   bsp_s = measureBSPcostS();
   verbose("Starting to calculate average S");
   bsp_sstep(0);
     bsp_store(0,&bsp_s,&all_bsp_s[my_pid],sizeof(double));
   bsp_sstep_end(0);
   bsp_reduce(double_add, &bsp_s, &avg_bsp_s, sizeof(double));
   avg_bsp_s = avg_bsp_s / (double) bsp_p;
\end{code}

\begin{code}
   verbose("Starting to measure L");
   bsp_l           = measureBSPcostL();
   verbose("Starting to calculate average L");
   bsp_sstep(1);
      bsp_store(0,&bsp_l,&all_bsp_l[my_pid],   sizeof(double));
   bsp_sstep_end(1);
   bsp_reduce(double_add, &bsp_l, &avg_bsp_l, sizeof(double));
   avg_bsp_l = avg_bsp_l / (double) bsp_p;
\end{code}

\begin{code}
   verbose("Starting to calculate G send random");
   bsp_randoms_g   = measureBSPcostG(bsp_random_pid,True);
   verbose("Starting to calculate G send reverse");
   bsp_reverses_g  = measureBSPcostG(bsp_reverse_pid,True);
   verbose("Starting to calculate G send constant");
   bsp_constants_g = measureBSPcostG(bsp_constant_pid,True);
   verbose("Starting to calculate G fetch random");
   bsp_randomf_g   = measureBSPcostG(bsp_random_pid,False);
   verbose("Starting to calculate G fetch reverse");
   bsp_reversef_g  = measureBSPcostG(bsp_reverse_pid,False);
   verbose("Starting to calculate G fetch constant");
   bsp_constantf_g = measureBSPcostG(bsp_constant_pid,False);

   bsp_sstep(2);
     bsp_store(0,&bsp_randoms_g,  &all_bsp_randoms_g[my_pid],  sizeof(double));
     bsp_store(0,&bsp_reverses_g, &all_bsp_reverses_g[my_pid], sizeof(double));
     bsp_store(0,&bsp_constants_g,&all_bsp_constants_g[my_pid],sizeof(double));
     bsp_store(0,&bsp_randomf_g,  &all_bsp_randomf_g[my_pid],  sizeof(double));
     bsp_store(0,&bsp_reversef_g, &all_bsp_reversef_g[my_pid], sizeof(double));
     bsp_store(0,&bsp_constantf_g,&all_bsp_constantf_g[my_pid],sizeof(double));
   bsp_sstep_end(2);
\end{code}

\begin{code}
   if (my_pid == 0) {
     if (logAsGnuplot)  logGnuplotResults();
     else               logBSPresults();
d96 2
a97 3
   startStopWatch("end of program");
   bsp_finish();
    
d100 1
d105 10
a114 1
double measureBSPcostS() 
d116 1
a116 1
  int i             = 0;
a119 1
  int benchmark_size;
d121 6
a126 13
  int timeout_iterations = 0;
  double empty_loop;
  double work_loop;
  static timing_error;

  benchmark_size = (int) ((double) LARGE_LOOP_ITERATIONS)*profile_resolution;
  bspErrorBottom(!(vecA=(float*)calloc(benchmark_size,sizeof(float))),
                 "Failed to allocate vector for dot product used in S");

  bspErrorBottom(!(vecB=(float*)calloc(benchmark_size,sizeof(float))),
                 "Failed to allocate vector for dot product used in S");
  verbose("In S, initialising vectors for dot product");
  for (i=0; i < benchmark_size; i++) {
d130 23
a152 2
  timing_error = True;
  while (timing_error && (++timeout_iterations < NO_TIMEOUTS)) {
d154 23
a176 28
     startStopWatch("begin empty");
        for (i=0; i < benchmark_size;  i++);
     startStopWatch("end empty");
     empty_loop = userTime() + systemTime();
     timing_error = !trustTimer(TRUST_USER | TRUST_SYSTEM);
 
     verbose("In S, performing dot product");
     startStopWatch("begin S");
        for (i=0; i < benchmark_size; i++) 
           dot_product += vecA[i] * vecB[i];
     startStopWatch("end S");
     timing_error = timing_error || !trustTimer(TRUST_USER | TRUST_SYSTEM);
     bsp_reduce(logical_or,&timing_error,&timing_error,sizeof(bool));     
   }

   if (dot_product > 0.0) {
      /* This conditional is a waste of time. However, I think that */
      /* the optimiser is eliding the increment above, so this will */
      /* hopefully fool it :-)                                      */
      work_loop = userTime() + systemTime();
   }
   sprintf(error_buffer,"Unable to trust the value for S (work=%f, empty=%f)",
           work_loop,empty_loop);
   bspErrorBottom(timing_error || (work_loop - empty_loop < 0.0),
                  "measureBSPCostS",error_buffer);

   return (((double) (2 * benchmark_size))/
                     (work_loop -empty_loop));
d184 1
a184 1
double measureBSPcostL() 
a185 2
  int timeout_iterations = 0;
  static timing_error;
d188 7
a194 11
  timing_error      = True;
  while (timing_error && (++timeout_iterations < NO_TIMEOUTS)) {
     startStopWatch("begin L");
     for (i=0; i < (SMALL_LOOP_ITERATIONS*profile_resolution); i++) {
        bsp_sstep(3);
          /* Do nothing */
        bsp_sstep_end(3);
      }
     startStopWatch("end L"); 
     timing_error = !trustTimer(TRUST_WALL);
     bsp_reduce(logical_or,&timing_error,&timing_error,sizeof(bool));    
d196 4
a199 5
  sprintf(error_buffer,"Unable to trust the value for L (wall = %f)",
          wallTime());

  bspErrorBottom(timing_error ,"measureBSPCostL",error_buffer);
  return (avg_bsp_s*(wallTime()/(SMALL_LOOP_ITERATIONS*profile_resolution))); 
d206 29
a234 171
int bsp_random_pid()
{
   return (random() % bsp_p);
 }

int bsp_reverse_pid()
{
   return (bsp_p - my_pid -1);
}

int bsp_constant_pid()
{
   return (0);
}


\end{code}

\begin{code}
double measureBSPcostG(pid_fn,use_send) 
int (*pid_fn)();
bool use_send;
{
  int i;
  static double total_s_all_procs = 0.0;
  static int    sending_buffer[MAX_PACKET_SIZE];
  int timeout_iterations= 0;
  int resolution        =(profile_resolution<1.0 ? 1 : 
                                                   (int) profile_resolution);
  static bool timing_error;

  startStopWatch("begin accumlate + broadcast S");
  if (my_pid==0) {
     for (i=0; i < bsp_p; i++) total_s_all_procs += all_bsp_s[i];
   }
  bsp_broadcast(0,&total_s_all_procs, &total_s_all_procs, sizeof(double));
  startStopWatch("end accumlate + broadcast S");

  timing_error      = True;     /* Enter the loop at least once  */
  while (timing_error && (++timeout_iterations < NO_TIMEOUTS)) {
     startStopWatch("begin G");
     for (i=0; i < resolution; i++) {
        bsp_sstep(4);
           if (use_send) {
              bsp_store(pid_fn(), &sending_buffer, &sending_buffer, 
                        sizeof(int)*packet_size);
	   } else {
              bsp_fetch(pid_fn(), &sending_buffer, &sending_buffer, 
                        sizeof(int)*packet_size);
	   }
        bsp_sstep_end(4);
     }
     startStopWatch("end G");
     timing_error = !trustTimer(TRUST_WALL);
     bsp_reduce(logical_or,&timing_error,&timing_error,sizeof(bool)); 
     /* make sure that all the processors go round the loop in */
     /* lock-step, otherwise everyone will not synchronise with the */
     /* superstep */
   }
   bspErrorBottom(!trustTimer(TRUST_WALL),"measureBSPCostG",
                                "Unable to trust the value for G");
   return (total_s_all_procs / 
           ((double) packet_size /
                     (wallTime()/resolution)- avg_bsp_l));
}
\end{code}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Output the results of the probe}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{code}
void logBSPresults() 
{
   struct utsname name;
   int i;

   if (!uname(&name)) 
      printf("\n\t[Probe running on a network of %d %s.]",bsp_p, name.machine); 
   else 
      printf("\n\t[Probe running on %d processors.]", bsp_p);
   printf("\n\t[Times are in microseconds]\n\n");

   printf("%10s |%15s %15s\n","Procs (P)","Speeds (S)",
          "Synch lat (L)");
   for (i=0; i<bsp_p; i++) {
      printf("%10d |%15.2f |%15.2f\n",i,all_bsp_s[i], all_bsp_l[i]);
    }
   printf("===========|================|");
   printf("================\n");
   printf("%10s |%15.2f |%15.2f\n","average",avg_bsp_s,avg_bsp_l);
   printf("\n\n");


   printf("\n\t[Packet size is %d words]\n\n", packet_size);
   printf("%4s |%28s |%28s\n","proc","G (using send)", "G (using fetch)");

   printf("%4s |%8s |%8s |%8s |%8s |%8s |%8s\n",
          "","constant","reverse", "random","constant","reverse", "random");
   for (i=0; i<bsp_p; i++) {
      printf("%4d |%8.2f |%8.2f |%8.2f |%8.2f |%8.2f |%8.2f \n",i,
           all_bsp_constants_g[i],all_bsp_reverses_g[i],all_bsp_randoms_g[i],
           all_bsp_constantf_g[i],all_bsp_reversef_g[i],all_bsp_randomf_g[i]);
      avg_bsp_constants_g += all_bsp_constants_g[i];
      avg_bsp_reverses_g  += all_bsp_reverses_g[i];
      avg_bsp_randoms_g   += all_bsp_randoms_g[i];
      avg_bsp_constantf_g += all_bsp_constantf_g[i];
      avg_bsp_reversef_g  += all_bsp_reversef_g[i];
      avg_bsp_randomf_g   += all_bsp_randomf_g[i];
    }
   printf("=====|=========|=========|=========|");
   printf("=========|=========|=========\n");
   printf("%4s |%8.2f |%8.2f |%8.2f |%8.2f |%8.2f |%8.2f  \n","avg",
                                           avg_bsp_constants_g / bsp_p,
                                           avg_bsp_reverses_g / bsp_p,
                                           avg_bsp_randoms_g / bsp_p,
                                           avg_bsp_constantf_g / bsp_p,
                                           avg_bsp_reversef_g / bsp_p,
                                           avg_bsp_randomf_g / bsp_p);
}
\end{code}

\begin{code}
void logGnuplotResults() {
   int i;

   FILE *fptr;

   if (logAsGnuplot==1) {
      fptr = fopen("Results/bsp_p_s.dat","a");
         fprintf(fptr,"%d %f\n", bsp_p, avg_bsp_s);
      fclose(fptr);
   
      fptr = fopen("Results/bsp_p_l.dat","a");
         fprintf(fptr,"%d %f\n", bsp_p, avg_bsp_l);
      fclose(fptr);
   } else if (logAsGnuplot == 2) {
      for (i=0; i<bsp_p; i++) {
         avg_bsp_constants_g += all_bsp_constants_g[i];
         avg_bsp_reverses_g  += all_bsp_reverses_g[i];
         avg_bsp_randoms_g   += all_bsp_randoms_g[i];
         avg_bsp_constantf_g += all_bsp_constantf_g[i];
         avg_bsp_reversef_g  += all_bsp_reversef_g[i];
         avg_bsp_randomf_g   += all_bsp_randomf_g[i];
       }
      fptr = fopen("Results/bsp_h_gsc.dat","a");
         fprintf(fptr,"%d %f\n", packet_size, avg_bsp_constants_g);
      fclose(fptr);

      fptr = fopen("Results/bsp_h_gsr.dat","a");
         fprintf(fptr,"%d %f\n", packet_size, avg_bsp_reverses_g);
      fclose(fptr);

      fptr = fopen("Results/bsp_h_gsa.dat","a");
         fprintf(fptr,"%d %f\n", packet_size, avg_bsp_randoms_g);
      fclose(fptr);

      fptr = fopen("Results/bsp_h_gfc.dat","a");
         fprintf(fptr,"%d %f\n", packet_size, avg_bsp_constantf_g);
      fclose(fptr);

      fptr = fopen("Results/bsp_h_gfr.dat","a");
         fprintf(fptr,"%d %f\n", packet_size, avg_bsp_reversef_g);
      fclose(fptr);

      fptr = fopen("Results/bsp_h_gfa.dat","a");
         fprintf(fptr,"%d %f\n", packet_size, avg_bsp_randomf_g);
      fclose(fptr);
    }

@


1.1
log
@Initial revision
@
text
@d4 5
a8 2
% $Id$
% $Log$
d20 8
a27 1
static char *usage_str = "usage: bspprobe [-r number] [-p number]";
d29 7
a35 1
int       profile_resolution = 1;
d37 31
a67 5
int my_pid;
int     bsp_p = 1;     /* number of processors                     */
double  bsp_s;         /* processor speed, i.e., operations/second */
double  bsp_l;         /* bulk synchronisation period              */
double  bsp_g;         /* global communication performance         */
d74 2
d77 4
d87 10
a96 6
void main(argc, argv)
int    argc; 
char **argv;
{
   int  i, temp;
   bool command_line_error = False;
d98 1
d102 38
a139 8
   while (i+1 <= (argc -1)) {
      if      ( (strcmp(argv[i],"-r")==0) &&
                (sscanf(argv[i+1],"%d",&temp))) profile_resolution = temp;
      else if ( (strcmp(argv[i],"-p")==0) &&
                (sscanf(argv[i+1],"%d",&temp))) bsp_p = temp;
      else command_line_error = True;  
      i += 2;
   }
d141 2
d144 48
a191 6
   bsp_l = measureBSPcostL();
   if (my_pid==0) logBSPresults();
   if (command_line_error) {
      fprintf(stderr,"%s\n",usage_str);
      exit(1);
   } 
d193 1
a193 2
   showWatch();
   bspfinish();
d203 5
a207 2
  int i       = 0;
  float trash = 0.0;
d209 1
d211 22
a232 5
   startStopWatch("begin empty");
     for (i=0; i < (100000 * profile_resolution); i++);
  startStopWatch("end empty");
  showWatch();
  empty_loop = userTime();
d234 19
a252 4
  startStopWatch("begin S");
     for (i=0; i < (100000 * profile_resolution); i++) trash += 0.1;
  startStopWatch("end S");
  showWatch();
d254 2
a255 1
  return (((double) (100000 * profile_resolution))/(userTime()-empty_loop)); 
d265 59
a323 5
  
  if (my_pid==0) startStopWatch("begin L");
  bspsstep(0);
    /* Do nothing */
  bspsstep_end(0);
d325 32
a356 5
    startStopWatch("end L");
    showWatch();
  } 
  return (0.0); 
 }
d368 1
d370 42
a411 10
   if (my_pid==0) {
     if (!uname(&name)) 
       printf("\nProbe running on a network of %d %s.", bsp_p, name.machine); 
     else 
       printf("\nProbe running on %d processors. ", bsp_p);

     printf("\n\n");
     printf("\t S (processor speed)              = %f\n", bsp_s);  
     printf("\t L (synchronisation barrier time) = %f\n", bsp_l);  
   }
d415 3
d419 1
d421 41
d463 2
@

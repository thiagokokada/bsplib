head	1.2;
access;
symbols;
locks
	jonh:1.2; strict;
comment	@# @;


1.2
date	96.04.03.11.24.09;	author jonh;	state Exp;
branches;
next	1.1;

1.1
date	95.09.01.13.54.53;	author jonh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removing message passing munging
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Copyright (C) 1995, University of Oxford                         %%
%%                                                                       %%
%% Permission to use, copy, modify, and distribute this software,        %%
%% and to incorporate it, in whole or in part, into other software,      %%
%% is hereby granted without fee, provided that                          %%
%%   (1) the above copyright notice and this permission notice appear in %%
%%       all copies of the source code, and the above copyright notice   %%
%%       appear in clearly visible form on all supporting documentation  %%
%%       and distribution media;                                         %%
%%   (2) modified versions of this software be accompanied by a complete %%
%%       change history describing author, date, and modifications made; %%
%%       and                                                             %%
%%   (3) any redistribution of the software, in original or modified     %%
%%       form, be without fee and subject to these same conditions.      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: bspcpp.lprl,v 1.1 1995/09/01 13:54:53 jonh Exp jonh $
% $Log: bspcpp.lprl,v $
# Revision 1.1  1995/09/01  13:54:53  jonh
# Initial revision
#
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Convert C containing BSP library calls}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{code}
($Pgm = $0)    =~ s|.*/||;
$infile        ="";
$tmpfile1      ="/tmp/bspcpp1.$$";
$tmpfile2      ="/tmp/bspcpp2.$$";
$outfile       ="";
$sstep_lineno  = 0;
$next_addr     = 0;
$miller        = 0;
$mpass         = 0;
$linenumber    = 0;
$contains_fetch= 0;
$underscore    = 0;
&main();
exit(0);
\end{code}

\begin{code}
sub main {
  local($going);
  if ($#ARGV<2) {
    print STDERR"usage: bspcpp [-mpass] [-miller] realname infile outfile\n";
    exit(1);
  } else {
    $going=1;
    while($going) {
      if ($ARGV[0]=~ /-mpass/) {
        $mpass = 1;
        shift(@@ARGV);
      } elsif ($ARGV[0]=~ /-miller/) {
        $miller= 1;
        shift(@@ARGV);
      } elsif ($ARGV[0]=~ /-uscore/) {
        $underscore = 1;
        shift(@@ARGV);
      } else {
        $going=0;
      }
      $going=0 if $#ARGV==0;
    }
    $filename = $ARGV[0];
    $infile   = $ARGV[1];
    $outfile  = $ARGV[2];
    if      (($mpass)  && (!$miller)) {
      # &convertMessagePassCode($infile,$tmpfile1);
      &convertStoreFetchs($infile,$outfile);
      unlink $tmpfile1;
    } elsif (($mpass)  && ($miller)) {
      &catFile($infile,$outfile);
      # &convertMessagePassCode($infile,$outfile);
    } elsif ((!$mpass) && ($miller)) {
      &catFile($infile,$outfile);
    } elsif ((!$mpass) && (!$miller)) {
      &convertStoreFetchs($infile,$outfile);
    }
  }
}
\end{code}

\begin{code}
sub  catFile {
  local($convin,$convout) = @@_;
   
  if (!open(INFILE,$convin)) {
    printf STDERR "$Pgm: unable to open $convin for reading\n";
    exit(1);
  }

  if (!open(OUTFILE,"> ". $convout)) {
    printf STDERR "$Pgm: unable to open $convout for writing\n";
    exit(1);
  }
  print OUTFILE "\#line 1 \"$filename\"\n";
  while (<INFILE>) {
    print OUTFILE $_;
  }
  close(INFILE);
  close(OUTFILE);
}
\end{code}

\begin{code}
sub convertStoreFetchs {
  local($convin,$convout) = @@_;
  local($superstep_code);
  local($startsuperstep_code);
  local($begin_sstep_code);
  local($in_superstep)=0;
   
  if (!open(INFILE,$convin)) {
    printf STDERR "$Pgm: unable to open $convin for reading\n";
    exit(1);
  }

  if (!open(OUTFILE,"> ". $convout)) {
    printf STDERR "$Pgm: unable to open $convout for writing\n";
    exit(1);
  } 
  print OUTFILE "\#line 1 \"$filename\"\n";
  while($line = <INFILE>) {
    $linenumber++;
    if ($line =~ /\#\s*(\d+)\s*\"[^\"]*\"\s*$/) {
      print OUTFILE $line;
      $linenumber = int($1);
    }
    elsif (&beginSuperStep($line)) {
      $begin_sstep_code = $line; 
      $in_superstep     =1;
    }
    elsif (&endSuperStep($line)) {
      print OUTFILE $startsuperstep_code ,$begin_sstep_code,
                    "\#line ", $sstep_lineno+1, " \"$filename\"\n",
                    $superstep_code;
      print OUTFILE $line; 
      $superstep_code = "";
      $startsuperstep_code = "";
      $in_superstep   =0;
    }
    elsif ($in_superstep) {
      if (&containsLibraryCall($line)) {
        local($i,$j)= &rewriteLibraryCall($line);
        $startsuperstep_code.=$i;
        $superstep_code     .=$j;
      } else {
        $superstep_code .= $line;
      }
    } else {
      print OUTFILE $line;
    }
  }
}
\end{code}

This routine is completely hacky and not very robust. The routine performs 
three jobs: 
\begin{itemize}
\item Convert procedure \texttt{main} to \texttt{bspusermain_}.
\item After the declarations in the routine that has a call to 
      \texttt{bsp\_start}, insert a jump to the line that contains the start.
\item Create a procedure \texttt{bspstart_stub_} that contains a call to the
      procedure that contained BSP start.
\end{itemize}

\begin{code}
sub convertMessagePassCode {
  local($convin,$convout) = @@_;
  local(@@arguments);
  local($before,$maxproc,$nproc,$my_pid,@@rest);
  local($procedure,$procedure_arity,$procedure_type,$line,$going);
  local($startprocedure,$startprocedure_type,$startprocedure_arity,$i);

  if (!open(INFILE,$convin)) {
    printf STDERR "$Pgm: unable to open $convin for reading\n";
    exit(1);
  }
  while($line = <INFILE>) {
    if ($line=~/^\s*main\(/) {
      $procedure      = "main";
      $procedure_type = "void";
      @@arguments = &grabArguments($');
      $procedure_arity = $#arguments;
    } elsif ($line=~/^\s*(void|int|float|double)\s+([a-zA-Z0-9\_]+)\(/) {
      $procedure      = $2;
      $procedure_type = $1;
      @@arguments = &grabArguments($');
      $procedure_arity = $#arguments;
    } elsif ($line =~ /bsp\_?start\(/) {
      $startprocedure       = $procedure;
      $startprocedure_type  = $procedure_type;
      $startprocedure_arity = $procedure_arity;
    }
  } 
  close(INFILE);
  open(INFILE,$convin);
  open(OUTFILE,"> $convout");
  print OUTFILE "\#line 1 \"$filename\"\n";
 
  while($line = <INFILE>) {
    if ($line=~/^\s*(void|int|float|double)\s+([a-zA-Z0-9\_]+)\(/ || 
        $line=~/^(\s*)(main)\(/) {
      $procedure = $2;
      if ($procedure eq "main") {
        print OUTFILE "void bspusermain_($'";
        if ($startprocedure eq "main") {
          $startprocedure = "bspusermain_";
          $procedure      = "bspusermain_";
        }
      } else {
        print OUTFILE $line;
      }
      if (($startprocedure ne "") &&
          ($startprocedure eq $procedure)) {
        $going=1;
      
        while($going) {
          $line = <INFILE>;
          # Look for end of declarations
          if (($line =~ /^\s*$/) || ($line=~ /^\s*\/\*/)) {
            print OUTFILE $line;
          } elsif ($line =~ /bsp\_?start\(/) {
            print OUTFILE $line;
            $going=0;
          } elsif (!($line =~ /^\s*\w+\s+[a-zA-Z0-9\_\*]+/i)) {
            $going=0;
            if (!$miller) {
              print OUTFILE "\nif (_bsp_pid>0) goto bspstartlabel;\n";
            }
            print OUTFILE $line;
          } else {
            print OUTFILE $line;
          }
        }
      }
    } elsif ($line =~ /bsp\_?start\(/) {
      print OUTFILE "bspstartlabel: $line";
      
    } else {
      print OUTFILE $line;
    }
  }   
  close(INFILE);
  if ($startprocedure ne "") {
    print OUTFILE "\n",
                  "$startprocedure_type bspstart_stub_() {\n",
                  "   $startprocedure(";
    for($i=1;$i<$startprocedure_arity;$i++) {
      print OUTFILE "0L,";
    }
    $startprocedure_arity>0 && (print OUTFILE "0L");
    print OUTFILE ");\n";
    if ($startprocedure_type eq "void") {
      print OUTFILE "}\n";
    } else {
      print OUTFILE "   return (0L);\n}\n";
    }
    print OUTFILE "void main(int argc,char** argv) {\n",
                  "  bsplibmain";
    print OUTFILE "_"  if $underscore;
    print OUTFILE "(argc,argv);\n}\n";
  }
  close(OUTFILE);
}
\end{code}


\begin{code}
sub containsLibraryCall {
  local($line) = $_[0];
  local($libcall);

  ($line =~/bsp\_store/) && return 1;
  ($line =~/bsp\_fetch/) && return 1;
  return 0;
}

sub rewriteLibraryCall {
   local($line)=$_[0];
   local(@@arguments);
   local($pid,$src,$dst,$offset,$nbytes);

   local($i); 
   if ($line =~ /bsp\_store\s*\(/) {
     $line = $`;
     @@arguments = &grabArguments($');
     if (($miller  && $#arguments != 4) || 
         (!$miller && $#arguments != 5)) {
        print STDERR "**$Pgm warning**\tThe procedure call bsp_store on ",
                     "line $linenumber of $infile has\n\t\t\t",
                     "the wrong number of arguments\n\n";
     }
     ($pid,$src,$dst,$offset,$nbytes,@@rest) = @@arguments;
     $line .= "bsp_addr_store($pid,$src,$next_addr,$offset,$nbytes)" . 
              join("",@@rest);
     return ("bsp_addr(".$next_addr++.",$dst);\n",$line);
   } elsif ($line =~ /bsp\_fetch\s*\(/) {
     $line = $`;
     @@arguments = &grabArguments($');
     if (($miller  && $#arguments != 4) || 
         (!$miller && $#arguments != 5)) {
        print STDERR "**$Pgm warning**\tThe procedure call bsp_fetch on ",
                     "line $linenumber of $infile has\n\t\t\t",
                     "the wrong number of arguments\n\n";
     }
     ($pid,$src,$offset,$dst,$nbytes,@@rest) = @@arguments;
     $line .= "bsp_addr_fetch($pid,$next_addr,$offset,$dst,$nbytes)" . 
              join("",@@rest);
     return ("bsp_addr(".$next_addr++.",$src);\n",$line);
   } else {
      print STDERR "**%Pgm error** internal translation problem\n";
   }
}

sub grabArguments {
   local($line)=$_[0];
   local($after_close);
   local($inside_brackets);
   local($level) = 1;
   local($char);
   
   while ($level != 0) {
     if      ($line =~ /\(|\)/ ) {
       if ($& eq "(") {
         $level++;
       } else {
         $level--;
       }
       $inside_brackets .= $` . $&;
       $line = $';
     } else { 
       $inside_brackets .= $line;
       $line = <INFILE>;
       $linenumber++;
     }
   }
   chop($inside_brackets);
   $after_close = $line;

   $level            =0;
   local(@@arguments) =();
   local($word)      ="";
   
   foreach $char (split(//,$inside_brackets)) {
      if ("$char" eq "(") {
         $level++;
         $word .= "$char";
      } elsif ("$char" eq ")") {
         $level--;
         $word .= "$char";
      } elsif (("$char" eq ",") && ($level==0)) {
        push(@@arguments,$word);
        $word="";
      } else {
        $word .= "$char";
      }        
   }
   push(@@arguments,$word);
   push(@@arguments,$after_close);
   return(@@arguments);
}

sub beginSuperStep {
  if ($_[0] =~ /bsp\_sstep\(/) {
    $sstep_lineno = $linenumber;
    return 1;
  } else {
    return 0;
  }
}

sub endSuperStep {
  if ($_[0] =~ /bsp\_sstep\_end\(/) {
    if (!$in_superstep) {
           print STDERR "**$Pgm warning** found end of super-step $1 on ",
                        "line $linenumber of $infile before the start\n\n";
    }  
    return(1);
  } else {
     return(0);
  }
}
\end{code}
@


1.1
log
@Initial revision
@
text
@d17 5
a21 2
% $Id$
% $Log$
d27 12
a38 10
($Pgm = $0) =~ s|.*/||;
$infile       ="";
$tmpfile      ="/tmp/bspcpp.$$";
$outfile      ="";
$sstep_id     ="";
$sstep_lineno = 0;
$next_addr    = 0;
$miller       = 0;
$mpass        = 0;
$linenumber   = 0;
d58 3
d70 3
a72 3
      &convertMessagePassCode($infile,$tmpfile);
      &convertStoreFetchs($tmpfile,$outfile);
      unlink $tmpfile;
d74 2
a75 1
      &convertMessagePassCode($infile,$outfile);
d77 1
a77 1
      system("cp $infile $outfile");
d86 22
d112 1
d132 2
a133 2
      print OUTFILE $line; 
      $in_superstep   =1;
d136 1
a136 1
      print OUTFILE $startsuperstep_code ,
d162 1
a162 1
\item Convert procedure \texttt{main} to \texttt{bspmain}.
d165 1
a165 1
\item Create a procedure \texttt{_bsp_start_stub} that contains a call to the
d182 6
a187 1
    if ($line=~/^\s*(void|int|float|double)\s+(\w+)\(/) {
d192 1
a192 1
    } elsif ($line =~ /bsp\_start\(/) {
d201 2
d204 2
a205 1
    if ($line=~/^\s*(void|int|float|double)\s+(\w+)\(/) {
d208 1
a208 1
        print OUTFILE "void bspmain($'";
d210 2
a211 2
          $startprocedure = "bspmain";
          $procedure      = "bspmain";
d216 2
a217 1
      if ($startprocedure eq $procedure) {
d225 1
a225 1
          } elsif ($line =~ /bsp\_start/) {
d229 5
a233 3
            $going = 0;
            print OUTFILE "\nif (_bsp_pid>0) goto bspstartlabel;\n",
                          $line;
d239 1
a239 1
    } elsif ($line =~ /bsp\_start\(/) {
d249 1
a249 1
                  "$startprocedure_type _bsp_start_stub() {\n",
d261 4
d297 1
a297 1
     $line .= "_bsp_store($pid,$src,$next_addr,$offset,$nbytes)" . 
d310 1
a310 1
     $line .= "_bsp_fetch($pid,$next_addr,$offset,$dst,$nbytes)" . 
d367 1
a367 2
  if ($_[0] =~ /bsp\_sstep\((\d+)\)/) {
    $sstep_id     = $1;
d376 1
a376 1
  if ($_[0] =~ /bsp\_sstep\_end\((\d+)\)/) {
d380 1
a380 5
    }  elsif ($1 ne $sstep_id) {
       print STDERR "**$Pgm warning**\tThe start of super-step $sstep_id ",
                    "on line $sstep_lineno of $infile is\n\t\t\t",
                    "ended by super-step $1 on line $linenumber\n\n";
    }
@
